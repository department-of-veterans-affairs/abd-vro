
buildscript {
    dependencies {
        classpath "gov.va.starter:plugins:${starter_boot_version}"
        classpath "gov.va.starter:cookiecutter:${starter_boot_version}"
        classpath "se.patrikerdes:gradle-use-latest-versions-plugin:${use_latest_versions_plugin_version}"
        classpath "com.github.ben-manes:gradle-versions-plugin:${versions_plugin_version}"
    }
    // There's a conflict between versions of jgit between spotless and axion release plugin
    configurations.classpath {
        resolutionStrategy {
            force 'org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r'
        }
    }
}


plugins {
    id("org.ajoberstar.grgit") version "${grgit_version}" apply false
    id("org.springframework.boot") version "${spring_boot_version}" apply false
    id("io.swagger.swaggerhub") version "${swaggerhub_version}" apply false
    id("com.diffplug.spotless") version "${spotless_plugin_version}" apply false
    id("com.palantir.docker") version "${palantir_docker_plugin_version}" apply false
    id("com.palantir.docker-run") version "${palantir_docker_run_plugin_version}" apply false

    id("net.rdrei.android.buildtimetracker") version "${buildtimetracker_version}" apply false
    id("com.github.ben-manes.versions") version "${versions_plugin_version}" apply false
    id("se.patrikerdes.use-latest-versions") version "${use_latest_versions_plugin_version}" apply false
    id("com.github.johnrengelman.processes") version "${processes_plugin_version}" apply false
    id("org.springdoc.openapi-gradle-plugin") version "${openapi_gradle_plugin_version}" apply false
    id("org.flywaydb.flyway") version "${flyway_plugin_version}" apply false
    id("com.felipefzdz.gradle.shellcheck") version "${shellcheck_plugin_version}" apply false
    id("org.barfuin.gradle.jacocolog") version "${jacocolog_plugin_version}" apply false
    id("org.barfuin.gradle.taskinfo") version "${taskinfo_plugin_version}"
    id("starter.java.build-utils-property-conventions") version "${starter_boot_version}"
    id("starter.java.build-utils-task-conventions") version "${starter_boot_version}"
    id("starter.java.release-conventions") version "${starter_boot_version}"
    id("starter.metrics.build-time-tracker-conventions") version "${starter_boot_version}"
    id("starter.java.versions-conventions") version "${starter_boot_version}"
    id("starter.java.test-jacoco-aggregation-conventions") version "${starter_boot_version}"
    id('starter.java.doc-mkdocs-conventions') version "${starter_boot_version}"
    id("pl.allegro.tech.build.axion-release") version "${axion_release_plugin_version}"
}

ext {
    // TODO: set back to true; temporarily disable test code coverage enforcement
    jacoco_enforce_violations = false
    jacoco_minimum_coverage = 0.8
    codeModules = [':app',
                   ':api',
                   ':controller',
                   ':persistence:model',
                   ':service:provider',
                   ':service:spi',
                   ':service-data-access']
    dockerModules = [':app',
                     ':service-python:assessclaimdc7101',
                     ':service-python:assessclaimdc6602',
                     ':service-python:pdfgenerator',
                     ':service-data-access',
                     ':db-init']
}


scmVersion {
    repository {
        type = 'git' // type of repository
        directory = project.rootProject.file('./') // repository location
        remote = 'origin' // remote name

//        customKey = getEnvOrDefault('GIT_AUTH_KEY', "customKeyDefault")
//        customKeyPassword = getEnvOrDefault('GIT_SECRET_KEY', "secretKeyDefault") // key password
    }

    // never connect to remote
    localOnly = true
    useHighestVersion = true
    sanitizeVersion = true

    tag { // version tag name
        prefix = 'v'
        versionSeparator = '' // separator between prefix and version number
        // set different prefix per branch
        branchPrefix = [ 'qa.*' : 'qa.' ]
    }

    nextVersion {
        suffix = 'SNAPSHOT' // tag suffix
        separator = '-' // separator between version and suffix
    }

    // doc: Version / Decorating
//    versionCreator { version, position -> ... } // creates version visible for Gradle from raw version and current position in scm
//    versionCreator 'versionWithBranch' // use one of predefined version creators
//    branchVersionCreator = [ // use different creator per branch
//                             'main/.*': 'default',
//                             'feature/.*': 'versionWithBranch'
//    ]

    versionIncrementer 'incrementPatch'

    checks { // Pre-release checks
        uncommittedChanges = true // permanently disable uncommitted changes check
        aheadOfRemote = false // permanently disable ahead of remote check
        snapshotDependencies = true // ensure no components depend on snapshot releases
    }
}

allprojects {
    project.version = scmVersion.version
}

// Support pre-commit hooks, need spotlessCheck and spotlessApply
def spotlessCheck = tasks.register('spotlessCheck') {
    def tb = taskBuilder('spotlessCheck')
    codeModules.each { dependsOn tb(it) }
}

def spotlessApply = tasks.register('spotlessApply') {
    def tb = taskBuilder('spotlessApply')
    codeModules.each { dependsOn tb(it) }
}

def maintainerclean = tasks.register('maintainerclean') {
    group = "Workflow"
    description = "clean all submodules"
    def tb = taskBuilder('clean')
    codeModules.each { dependsOn tb(it) }
    dockerModules.each { dependsOn tb(it) }
    //depender codeModules, taskBuilder('clean')
    //depender dockerModules, taskBuilder('clean')
}

def dockerclean = tasks.register('dockerclean') {
    group = "Workflow"
    description = "clean docker images"
    dependsOn ':app:dockerComposeDown'
    dependsOn ':app:dockerPrune'
}

def dockermaintainerclean = tasks.register('dockermaintainerclean') {
    group = "Workflow"
    description = "clean docker images"
    dependsOn ':app:dockerPruneVolume'
    mustRunAfter dockerclean
}

def devloop = tasks.register('devloop') {
    group = "Workflow"
    description = "Rebuild code, docker images, and restart docker-compose"
    dependsOn ':app:build'
    def tb = taskBuilder('docker')
    dockerModules.each { dependsOn tb(it) }
    //depender(dockerModules, taskBuilder('docker'))
    dependsOn ':app:dockerComposeUp'
    mustRunAfter dockerclean
    mustRunAfter dockermaintainerclean
}

def restartloop = tasks.register('restartloop') {
    group = "Workflow"
    description = "Stop docker-compose, delete unused images, continue with devloop task"
    dependsOn dockerclean
    dependsOn devloop
}

tasks.register('resetloop') {
    group = "Workflow"
    description = "Remove docker volumes, continue with restartloop task"
    dependsOn dockerclean
    dependsOn dockermaintainerclean
    dependsOn restartloop
}
