buildscript {
  dependencies {
    classpath "org.yaml:snakeyaml:2.0"
  }
  // There's a conflict between versions of jgit between spotless and axion release plugin
  configurations.classpath {
    resolutionStrategy {
      force 'org.eclipse.jgit:org.eclipse.jgit:6.6.0.202305301015-r'
    }
  }
}

plugins {
  id 'local.std.base-project-conventions'
  id 'pl.allegro.tech.build.axion-release' version '1.15.3'

  // Set versions for these plugins (but don't apply) so we don't have to repeat the versions in subprojects
  id "org.springframework.boot" version "${spring_boot_version}" apply false
}

allprojects {
  apply plugin: 'nebula.lint'
  gradleLint {
    alwaysRun = false
    reportFormat = 'text'
    // https://github.com/nebula-plugins/gradle-lint-plugin/wiki
    rules = ['unused-dependency']
    // criticalRules will fail the build in the event of a violation
    criticalRules = [
      'minimum-dependency-version',
      'overridden-dependency-version',
      'unused-exclude-by-dep',
      'unused-exclude-by-conf',
      'dependency-parentheses',
      'duplicate-dependency-class',
      'archaic-wrapper',
      'all-nebula-renames'
    ]
  }

  afterEvaluate {
    // Workaround for gradleLint failure
    // https://github.com/nebula-plugins/gradle-lint-plugin/issues/336#issuecomment-844989277
    // https://github.com/gradle/gradle/issues/6854
    // configurations.all {
    //   if (name.startsWith("incrementalScalaAnalysis")) {
    //     extendsFrom = []
    //   }
    // }
  }

  apply plugin: 'com.diffplug.spotless'
  spotless {
    // to format build.gradle files consistently
    groovyGradle {
      greclipse()
      indentWithSpaces(2)
    }
  }
}

subprojects {
  task allDependencies(type: DependencyReportTask) {}

  pluginManager.withPlugin('java') {
    // List all failedTest at the end of a build -- copied from https://stackoverflow.com/a/43936442
    // add a collection to track failedTests
    ext.failedTests = []
    // add a listener to all tasks of type Test
    tasks.withType(Test) {
      afterTest { TestDescriptor descriptor, TestResult result ->
        if (result.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
          failedTests << "${descriptor.className}::${descriptor.name}"
        }
      }
    }
    // print out tracked failed tests when the build has finished
    // TODO: https://github.com/gradle/gradle/issues/20151#issuecomment-1551007455
    // and https://docs.gradle.org/current/userguide/dataflow_actions.html#lifecycle_event_providers
    gradle.buildFinished {
      if (!failedTests.empty) {
        println "Failed tests:"
        failedTests.each { failedTest ->
          println "- " + failedTest
        }
        println ""
      }
    }
  }
}

ext {
  jacoco_enforce_violations = true
  jacoco_minimum_coverage = 0.8
}

// Used by `release` task to create a new version
scmVersion {
  // never connect to remote
  localOnly = true
  useHighestVersion = true

  def postgresDockerfileContent=file("${project.rootDir}/postgres/src/docker/Dockerfile").getText()
  def matcher = (postgresDockerfileContent =~ /FROM postgres:(.+)/)
  def postgresBaseImageVersion = matcher.getCount() > 0 ? matcher[0][1] : "latest"
  Map<String, Object> platformHelmValues = new org.yaml.snakeyaml.Yaml().load(file("${project.rootDir}/helm/platform/values.yaml").text)
  def helmChartAppVersions = [
    // These rarely change
    'postgres'   : postgresBaseImageVersion, // extracted from Dockerfile
    'redis'      : (String) platformHelmValues.get("redis-chart").get("imageTag"),
    'rabbitmq'   : (String) platformHelmValues.get("rabbitmq-chart").get("imageTag"),

    // Stable versions -- changes occasionally
    'console'    : '2.5.0',

    // These change often (i.e., with each release)
    // A null value will result in the currentVersion being used
    '..'         : null, // '..' will resolve to helm/Charts.yaml
    'api-gateway': null, // Update the version presented in SwaggerUI
    'vro-app'    : null,
    'svc-bgs-api': null,
    'svc-lighthouse-api': null,
    // Once stable, set a version and move to previous section
    'domain-cc'  : null,
  ]

  def setHelmChartAppVersions = { currentVersion ->
    helmChartAppVersions.collect { projectName, version ->
      if (version == null) version = currentVersion

      def helmChartFilePaths = [
        project.findProperty("helm.${projectName}.chart_file"),
        "/helm/${projectName}/Chart.yaml",
        "/helm/platform/charts/${projectName}/Chart.yaml",
        "/helm/vro/charts/${projectName}/Chart.yaml"
      ]
      def helmChartFilePath = helmChartFilePaths.find{ it != null && file("${project.rootDir}/$it").exists() }
      println String.format( "%-14s %-12s => %s", projectName, version, helmChartFilePath)
      if (version != null && helmChartFilePath != null) {
        def helmChartFile = file("${project.rootDir}/$helmChartFilePath")
        String s = helmChartFile.text.replaceFirst(/(?m)^appVersion: ".*"/, "appVersion: \"$version\"")
        helmChartFile.setText(s)
        helmChartFile
      }
    }
  }

  hooks {
    pre("fileUpdate", [file: "api-gateway/src/main/java/gov/va/vro/propmodel/Info.java",
      pattern    : { v, p -> /String version = "v.*"/ },
      replacement: { v, p -> "String version = \"v$v\"" }])
    pre("fileUpdate", [file: "scripts/image_versions.src",
      pattern    : { v, p -> /CURRENT_RELEASE_VER="v.*"/ },
      replacement: { v, p -> "CURRENT_RELEASE_VER=\"v$v\"" }])
    pre({ context ->
      def versionsFile = file("${project.rootDir}/versions.txt")
      versionsFile.append("v${context.currentVersion}\n")
      context.addCommitPattern(versionsFile.canonicalPath)
    })
    pre({ context ->
      setHelmChartAppVersions(context.currentVersion)
          .findAll{ it !=null }.each { file -> context.addCommitPattern(file.canonicalPath) }
    })
    pre("commit")
  }
}

allprojects {
  // https://axion-release-plugin.readthedocs.io/en/latest/configuration/basic_usage
  project.version = scmVersion.version
}

tasks.named("dockerComposeDown").configure {
  // Shut down subprojects' containers before Platform containers, volumes, and network
  mustRunAfter ':app:dockerComposeDown'
  mustRunAfter ':domain-xample:dockerComposeDown'
  mustRunAfter ':domain-cc:dockerComposeDown'
}
