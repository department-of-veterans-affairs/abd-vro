import ru.vyarus.gradle.plugin.python.task.PythonTask

buildscript {
    dependencies {
        classpath "gov.va.starter:plugins:${starter_boot_version}"
        classpath "gov.va.starter:cookiecutter:${starter_boot_version}"
        classpath "se.patrikerdes:gradle-use-latest-versions-plugin:${use_latest_versions_plugin_version}"
        classpath "com.github.ben-manes:gradle-versions-plugin:${versions_plugin_version}"
    }
    // There's a conflict between versions of jgit between spotless and axion release plugin
    configurations.classpath {
        resolutionStrategy {
            force 'org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r'
        }
    }
}


plugins {
    id("org.ajoberstar.grgit") version "${grgit_version}" apply false
    id("org.springframework.boot") version "${spring_boot_version}" apply false
    id("io.swagger.swaggerhub") version "${swaggerhub_version}" apply false
    id("com.diffplug.spotless") version "${spotless_plugin_version}" apply false
    id("com.palantir.docker") version "${palantir_docker_plugin_version}" apply false
    id("com.palantir.docker-run") version "${palantir_docker_run_plugin_version}" apply false

    id("net.rdrei.android.buildtimetracker") version "${buildtimetracker_version}" apply false
    id("pl.allegro.tech.build.axion-release") version "${axion_release_plugin_version}" apply false
    id("com.github.ben-manes.versions") version "${versions_plugin_version}" apply false
    id("se.patrikerdes.use-latest-versions") version "${use_latest_versions_plugin_version}" apply false
    id("com.github.johnrengelman.processes") version "${processes_plugin_version}" apply false
    id("org.springdoc.openapi-gradle-plugin") version "${openapi_gradle_plugin_version}" apply false
    id("org.flywaydb.flyway") version "${flyway_plugin_version}" apply false
    id("com.felipefzdz.gradle.shellcheck") version "${shellcheck_plugin_version}" apply false
    id("org.barfuin.gradle.jacocolog") version "${jacocolog_plugin_version}" apply false
    id("org.barfuin.gradle.taskinfo") version "${taskinfo_plugin_version}"
    id("starter.java.build-utils-property-conventions") version "${starter_boot_version}"
    id("starter.java.build-utils-task-conventions") version "${starter_boot_version}"
    id("starter.java.release-conventions") version "${starter_boot_version}"
    id("starter.metrics.build-time-tracker-conventions") version "${starter_boot_version}"
    id("starter.java.versions-conventions") version "${starter_boot_version}"
    id("starter.java.test-jacoco-aggregation-conventions") version "${starter_boot_version}"
    id('starter.java.doc-mkdocs-conventions') version "${starter_boot_version}"
    id('ru.vyarus.use-python') version "2.3.0"
}

python {
    installVirtualenv = true

    pip 'redis:4.3.4'
    pip 'boto3:1.23.3'
    pip 'click:8.1.2'
    pip 'Flask:2.1.1'
    pip 'flake8:4.0.1'
    pip 'importlib-metadata:4.11.3'
    pip 'itsdangerous:2.1.2'
    pip 'isort:5.10.1'
    pip 'Jinja2:3.1.1'
    pip 'MarkupSafe:2.1.1'
    pip 'pika:1.2.1'
    pip 'pdfkit:1.0.0'
    pip 'pytest:7.1.2'
    pip 'pytest-cov:3.0.0'
    pip 'python-dateutil:2.8.2'
    pip 'pytz:2022.1'
    pip 'redis:4.3.4'
    pip 'requests:2.28.1'
    pip 'Werkzeug:2.1.1'
    pip 'zipp:3.8.0'

    pip 'cerberus:1.3.4'
    pip 'python-util:1.2.1'
    pip 'python-dotenv:0.20.0'
    pip 'six:1.16.0'

}

ext {
    // TODO: set back to true; temporarily disable test code coverage enforcement
    jacoco_enforce_violations = false
    jacoco_minimum_coverage = 0.8
    codeModules = [':app',
                   ':api',
                   ':controller',
                   ':persistence:model',
                   ':service:provider',
                   ':service:spi',
                   ':service-data-access']
    dockerModules = [':app',
                     ':service-python:assessclaimdc7101',
                     ':service-python:assessclaimdc6602',
                     ':service-python:pdfgenerator',
                     ':service-data-access',
                     ':db-init']
}


// Support pre-commit hooks, need spotlessCheck and spotlessApply
def spotlessCheck = tasks.register('spotlessCheck') {
    def tb = taskBuilder('spotlessCheck')
    codeModules.each { dependsOn tb(it) }
}

def spotlessApply = tasks.register('spotlessApply') {
    def tb = taskBuilder('spotlessApply')
    codeModules.each { dependsOn tb(it) }
}

def maintainerclean = tasks.register('maintainerclean') {
    group = "Workflow"
    description = "clean all submodules"
    def tb = taskBuilder('clean')
    codeModules.each { dependsOn tb(it) }
    dockerModules.each { dependsOn tb(it) }
    //depender codeModules, taskBuilder('clean')
    //depender dockerModules, taskBuilder('clean')
}

def dockerclean = tasks.register('dockerclean') {
    group = "Workflow"
    description = "clean docker images"
    dependsOn ':app:dockerComposeDown'
    dependsOn ':app:dockerPrune'
}

def dockermaintainerclean = tasks.register('dockermaintainerclean') {
    group = "Workflow"
    description = "clean docker images"
    dependsOn ':app:dockerPruneVolume'
    mustRunAfter dockerclean
}

def devloop = tasks.register('devloop') {
    group = "Workflow"
    description = "Rebuild code, docker images, and restart docker-compose"
    dependsOn ':app:build'
    def tb = taskBuilder('docker')
    dockerModules.each { dependsOn tb(it) }
    //depender(dockerModules, taskBuilder('docker'))
    dependsOn ':app:dockerComposeUp'
    mustRunAfter dockerclean
    mustRunAfter dockermaintainerclean
}

def restartloop = tasks.register('restartloop') {
    group = "Workflow"
    description = "Stop docker-compose, delete unused images, continue with devloop task"
    dependsOn dockerclean
    dependsOn devloop
}

tasks.register('resetloop') {
    group = "Workflow"
    description = "Remove docker volumes, continue with restartloop task"
    dependsOn dockerclean
    dependsOn dockermaintainerclean
    dependsOn restartloop
}

def pyisort = tasks.register("pyisort", PythonTask) {
    workDir = "service-python"
    module = 'isort'
    command = ". --check --skip tests"
}

def pyflake8 = tasks.register("pyflake8", PythonTask) {
    workDir = "service-python"
    module = 'flake8'
    command = "."
    dependsOn pyisort
}

tasks.register("pytest", PythonTask) {
    workDir = "service-python"
    module = 'pytest'
    command = "--cov-report term-missing --cov=. --cov-fail-under=80 --cov-config=../.coveragerc"
    dependsOn pyflake8
}
