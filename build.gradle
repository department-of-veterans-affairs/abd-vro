
buildscript {
    dependencies {
        classpath "gov.va.starter:plugins:${starter_boot_version}"
        classpath "gov.va.starter:cookiecutter:${starter_boot_version}"
        classpath "se.patrikerdes:gradle-use-latest-versions-plugin:${use_latest_versions_plugin_version}"
        classpath "com.github.ben-manes:gradle-versions-plugin:${versions_plugin_version}"
    }
    // There's a conflict between versions of jgit between spotless and axion release plugin
    configurations.classpath {
        resolutionStrategy {
            force 'org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r'
        }
    }
}


plugins {
    id("org.ajoberstar.grgit") version "${grgit_version}" apply false
    id("org.springframework.boot") version "${spring_boot_version}" apply false
    id("io.swagger.swaggerhub") version "${swaggerhub_version}" apply false
    id("com.diffplug.spotless") version "${spotless_plugin_version}" apply false
    id("com.palantir.docker") version "${palantir_docker_plugin_version}" apply false
    id("com.palantir.docker-run") version "${palantir_docker_run_plugin_version}" apply false

    id("net.rdrei.android.buildtimetracker") version "${buildtimetracker_version}" apply false
    id("com.github.ben-manes.versions") version "${versions_plugin_version}" apply false
    id("se.patrikerdes.use-latest-versions") version "${use_latest_versions_plugin_version}" apply false
    id("com.github.johnrengelman.processes") version "${processes_plugin_version}" apply false
    id("org.springdoc.openapi-gradle-plugin") version "${openapi_gradle_plugin_version}" apply false
    id("org.flywaydb.flyway") version "${flyway_plugin_version}" apply false
    id("com.felipefzdz.gradle.shellcheck") version "${shellcheck_plugin_version}" apply false
    id 'nebula.lint' version '17.7.0' apply false
    id("org.barfuin.gradle.jacocolog") version "${jacocolog_plugin_version}" apply false
    id("org.barfuin.gradle.taskinfo") version "${taskinfo_plugin_version}"
    id("starter.java.build-utils-property-conventions") version "${starter_boot_version}"
    id("starter.java.build-utils-task-conventions") version "${starter_boot_version}"
    id("starter.java.release-conventions") version "${starter_boot_version}"
    id("starter.metrics.build-time-tracker-conventions") version "${starter_boot_version}"
    id("starter.java.versions-conventions") version "${starter_boot_version}"
    id("starter.java.test-jacoco-aggregation-conventions") version "${starter_boot_version}"
    id('starter.java.doc-mkdocs-conventions') version "${starter_boot_version}"
    id("pl.allegro.tech.build.axion-release") version "${axion_release_plugin_version}"
}

allprojects {
    apply plugin: 'nebula.lint'
    gradleLint {
        alwaysRun = false
        reportFormat = 'text'
        // https://github.com/nebula-plugins/gradle-lint-plugin/wiki
        rules = [ 'unused-dependency' ]
        // criticalRules will fail the build in the event of a violation
        criticalRules = [
                        'minimum-dependency-version',
                        'overridden-dependency-version',
                        'unused-exclude-by-dep',
                        'unused-exclude-by-conf',
                        'dependency-parentheses',
                        'duplicate-dependency-class',
                        'archaic-wrapper',
                        'all-nebula-renames'
                        ]
    }

    afterEvaluate {
        // Workaround for gradleLint failure
        // https://github.com/nebula-plugins/gradle-lint-plugin/issues/336#issuecomment-844989277
        // https://github.com/gradle/gradle/issues/6854
        configurations.all {
            if (name.startsWith("incrementalScalaAnalysis")) {
                extendsFrom = []
            }
        }
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: 'starter.java.config-conventions'
    dependencies {
        annotationBom platform("gov.va.starter:starter-bom:${starter_boot_version}")
        checkstyleRules platform("gov.va.starter:checkstyle-bom:${starter_boot_version}")

        // constrain transitive dependencies to use versions without vulnerabilities
        constraints {
            // for starter-bom
            implementation "org.springframework.boot:spring-boot-dependencies:${spring_boot_version}"
            implementation "org.springframework:spring-webmvc:${spring_framework_version}"
            implementation "org.springframework:spring-beans:${spring_framework_version}"
            implementation "io.github.classgraph:classgraph:${class_graph_version}"
            implementation "com.squareup.okhttp3:okhttp:4.10.0"
            implementation "org.yaml:snakeyaml:1.33"

            // for mockserver-netty and hapi-fhir
            implementation 'org.apache.commons:commons-text:1.10.0'
        }
    }

    afterEvaluate {
        if (tasks.findByName('docker')) {
            docker {
                noCache false
            }
        }
    }
}

ext {
    // TODO: set back to true; temporarily disable test code coverage enforcement
    jacoco_enforce_violations = false
    jacoco_minimum_coverage = 0.8
    codeModules = [':app',
                   ':api',
                   ':controller',
                   ':persistence:model',
                   ':service:provider',
                   ':service:spi',
                   ':svc-lighthouse-api']
    dockerModules = [':app',
                     ':service-python:assessclaimdc7101',
                     ':service-python:assessclaimdc6602',
                     ':service-python:pdfgenerator',
                     ':svc-lighthouse-api',
                     ':db-init']
}


scmVersion {
    // never connect to remote
    localOnly = true
    useHighestVersion = true

    hooks {
        pre("fileUpdate", [file: "app/src/main/java/gov/va/vro/config/propmodel/Info.java",
                           pattern: {v,p -> /version = "v.*"/},
                           replacement: {v, p -> "version = \"v$v\""}])
        pre("fileUpdate", [file: "helmchart/Chart.yaml",
                           pattern: {v,p -> /appVersion: .*/},
                           replacement: {v, p -> "appVersion: $v"}])
        pre("commit")
    }
}

allprojects {
    // https://axion-release-plugin.readthedocs.io/en/latest/configuration/basic_usage
    project.version = scmVersion.version
}

// Support pre-commit hooks, need spotlessCheck and spotlessApply
def spotlessCheck = tasks.register('spotlessCheck') {
    def tb = taskBuilder('spotlessCheck')
    codeModules.each { dependsOn tb(it) }
}

def spotlessApply = tasks.register('spotlessApply') {
    def tb = taskBuilder('spotlessApply')
    codeModules.each { dependsOn tb(it) }
}

def maintainerclean = tasks.register('maintainerclean') {
    group = "Workflow"
    description = "clean all submodules"
    def tb = taskBuilder('clean')
    codeModules.each { dependsOn tb(it) }
    dockerModules.each { dependsOn tb(it) }
    //depender codeModules, taskBuilder('clean')
    //depender dockerModules, taskBuilder('clean')
}

def dockerclean = tasks.register('dockerclean') {
    group = "Workflow"
    description = "clean docker images"
    dependsOn ':app:dockerComposeDown'
    dependsOn ':app:dockerPrune'
}

def dockermaintainerclean = tasks.register('dockermaintainerclean') {
    group = "Workflow"
    description = "clean docker images"
    dependsOn ':app:dockerPruneVolume'
    mustRunAfter dockerclean
}

def devloop = tasks.register('devloop') {
    group = "Workflow"
    description = "Rebuild code, docker images, and restart docker-compose"
    dependsOn ':app:build'
    def tb = taskBuilder('docker')
    dockerModules.each { dependsOn tb(it) }
    //depender(dockerModules, taskBuilder('docker'))
    dependsOn ':app:dockerComposeUp'
    mustRunAfter dockerclean
    mustRunAfter dockermaintainerclean
}

def restartloop = tasks.register('restartloop') {
    group = "Workflow"
    description = "Stop docker-compose, delete unused images, continue with devloop task"
    dependsOn dockerclean
    dependsOn devloop
}

tasks.register('resetloop') {
    group = "Workflow"
    description = "Remove docker volumes, continue with restartloop task"
    dependsOn dockerclean
    dependsOn dockermaintainerclean
    dependsOn restartloop
}
