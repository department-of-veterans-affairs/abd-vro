plugins {
  id 'local.java.container-spring-conventions'
  id 'starter.std.java.library-spring-conventions'
  id 'io.spring.dependency-management'
  id "io.freefair.lombok"
  id 'starter.java.build-utils-conventions'
  id 'jacoco'
}

ext {
  // TODO: improve test code coverage so that the following can be removed
  jacoco_minimum_coverage = 0.2
}

configurations.all {
  resolutionStrategy.dependencySubstitution {
    substitute module("org.yaml:snakeyaml") using module("org.yaml:snakeyaml:${snakeyaml_version}")
  }
}

dependencies {
  implementation project(':shared:domain')

  implementation "com.fasterxml.jackson.core:jackson-databind:${jackson_databind_version}"
  implementation "com.fasterxml.jackson.core:jackson-core:${jackson_version}"

  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  // implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

  implementation "org.springdoc:springdoc-openapi-webmvc-core"

  testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}"
}

ext.mockInfoFile = file("$buildDir/resources/main/mock-info-file.json")

task generateInfoFile() {
  outputs.file(mockInfoFile)
  doLast{
    def collectionFileList = []
    fileTree("src/main/resources/annotations").visit { FileVisitDetails details ->
      if (details.file.isFile()) {
        String name = details.file.name
        if (name.startsWith("collection-")) {
          collectionFileList << "\"" + name + "\""
        }
      }
    }
    mockInfoFile.text = "[" + String.join(",", collectionFileList) + "]"
  }
}
tasks.named("generateInfoFile") { dependsOn("build") }
tasks.named("build") { finalizedBy("generateInfoFile") }
