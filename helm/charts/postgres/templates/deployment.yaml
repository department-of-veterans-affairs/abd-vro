apiVersion: apps/v1
kind: Deployment
metadata:
  # Also used as the pod's prefix
  name: vro-postgres
  labels: {{- toYaml .Values.labels | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- toYaml .Values.labels | nindent 6 }}
      # TODO: is the following line needed?
      {{- toYaml .Values.global.pgdata.labels | nindent 6 }}
  template:
    metadata:
      labels:
        sidecar.istio.io/inject: "false"
        {{- toYaml .Values.labels | nindent 8 }}
        {{- toYaml .Values.global.pgdata.labels | nindent 8 }}
    spec:
      {{- include "vro.imagePullSecrets" . | nindent 6 }}
      {{- include "vro.volume.pgdata.affinity" . | nindent 6 }}
      # securityContext:
        # Keeping as a comment: Solution for EFS volume where container requires folder ownership; not required for EBS volume.
        # To address postgres container error "The server must be started by the user that owns the data directory."
        # Container runs as user uid=70(postgres) gid=70(postgres) groups=70(postgres),70(postgres)
        # The pgdata volume is owned by 50016, but this is variable -- TODO: ask LHDI.
        # https://stackoverflow.com/a/51195446 uses initContainer to chown but "Operation not permitted"!
        # Using solution at https://stackoverflow.com/q/57196736 results in
        # `id` returning `uid=50016 gid=70(postgres) groups=70(postgres)`
        #
        # Note: "postgres doesn't care what UID it runs as (as long as the owner of /var/lib/postgresql/data matches),
        #   but initdb does care (and needs the user to exist in /etc/passwd)" -- https://hub.docker.com/_/postgres
        # Running `initdb /persist/postgres/pgdataTest` manually results in the error but the container seems to work :shrug:
        # runAsUser: 50016
        # runAsGroup: 70
        # Any files created in the volume will have this group ID:
        # fsGroup: 70
      containers:
        - name: postgres--{{ .Release.Name }}
          image: {{ include "vro.imageRegistryPath" . }}/{{ .Values.image.name }}:{{ .Values.image.tag | default .Values.global.images.tag }}
          env:
            # TODO: Don't think this is needed by init-db.sh
            - name: ENV
              value: {{ required "expecting dev, prod, etc" .Values.global.environment }}
            # Following is for the DB superuser
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.dbinit.secretKeyRef.name }}
                  key: {{ .Values.global.dbinit.secretKeyRef.superUsernameKey }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.dbinit.secretKeyRef.name }}
                  key: {{ .Values.global.dbinit.secretKeyRef.superPasswordKey }}
            - name: PGDATA
              # https://hub.docker.com/_/postgres recommends using a subdirectory under the mounted directory
              value: {{ .Values.global.pgdata.mountPath }}/pgdata
            # Following is used to set up a user and DB schema for Flyway migrations
            - name: FLYWAY_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.dbinit.secretKeyRef.name }}
                  key: {{ .Values.global.dbinit.secretKeyRef.usernameKey }}
            - name: FLYWAY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.dbinit.secretKeyRef.name }}
                  key: {{ .Values.global.dbinit.secretKeyRef.passwordKey }}
            - name: FLYWAY_DB
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgres.secretKeyRef.name }}
                  key: {{ .Values.global.postgres.secretKeyRef.dbnameKey }}
          ports:
            - containerPort: {{ .Values.global.service.db.sourcePort }}
              protocol: TCP
          resources:
            requests:
              cpu: 150m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1024Mi
          # This volume is for DB data to be persisted
          volumeMounts:
            {{- include "vro.volumeMounts.pgdata" . | nindent 12 }}
      volumes:
        {{- include "vro.volumes.pgdata" . | nindent 8 }}
