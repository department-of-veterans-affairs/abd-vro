apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels: {{- toYaml .Values.labels.api | nindent 4 }}
  annotations:
    app.kubernetes.io/name: {{ .Values.name }}
    app.kubernetes.io/version: {{ .Values.version | quote }}
    app.kubernetes.io/owner: {{ .Values.owner }}
    app.kubernetes.io/env: {{ .Values.environment }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels: {{- toYaml .Values.labels.api | nindent 6 }}
  template:
    metadata:
      labels: {{- toYaml .Values.labels.api | nindent 8 }}
      annotations:
        app.kubernetes.io/podname: {{ .Values.name }}
        app.kubernetes.io/podversion: {{ .Values.version | quote }}
        app.kubernetes.io/podowner: {{ .Values.owner }}
        app.kubernetes.io/podenv: {{ .Values.environment }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.name }}-ghcr
      initContainers:
        - name: pg-isready
          image: postgres
          env:
            - name: POSTGRES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretName }}
                  key: {{ .Values.postgres.initUsernameKey }}
          command:
            - /bin/sh
            - -c
            - |
              /bin/sh -c "
                until pg_isready -d {{ .Values.postgres.initDbName }} -h {{ .Chart.Name }}-postgres-service -p {{ .Values.service.db.targetPort}} -U $POSTGRES_USERNAME; do
                  echo 'Waiting for Postgres DB to be available'
                  sleep 5
                done
              "
          resources: {{- toYaml .Values.resources.db | nindent 12 }}
        - name: db-init
          image: {{ .Values.images.registry }}/{{ .Values.images.org }}/{{ .Values.images.repo }}/{{ .Values.images.dbInit.imageName }}:{{ .Values.images.dbInit.tag }}
          imagePullPolicy: {{ .Values.images.dbInit.imagePullPolicy }}
          env:
            - name: FLYWAY_URL
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.url
            - name: FLYWAY_USER
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.user
            - name: FLYWAY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.password
            - name: FLYWAY_CONNECT_RETRIES
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.connectRetries
            - name: FLYWAY_DEFAULT_SCHEMA
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.defaultSchema
            - name: FLYWAY_SCHEMA
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.schemas
            - name: FLYWAY_CREATE_SCHEMAS
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.createSchemas
            - name: FLYWAY_TABLE
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.table
            - name: FLYWAY_TABLESPACE
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.tablespace
            - name: FLYWAY_LOCATIONS
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.locations
            - name: FLYWAY_SQL_MIGRATION_PREFIX
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.sqlMigrationPrefix
            - name: FLYWAY_REPEATABLE_SQL_MIGRATION_PREFIX
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.repeatableSqlMigrationPrefix
            - name: FLYWAY_SQL_MIGRATION_SEPARATOR
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.sqlMigrationSeparator
            - name: FLYWAY_SQL_MIGRATION_SUFFIXES
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.sqlMigrationSuffixes
            - name: FLYWAY_ENCODING
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.encoding
            - name: FLYWAY_PLACEHOLDER_REPLACEMENT
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.placeholderReplacement
            - name: FLYWAY_PLACEHOLDERS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.placeholders.username
            - name: FLYWAY_PLACEHOLDERS_SERVICE_NAME
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.placeholders.servicename
            - name: FLYWAY_PLACEHOLDERS_ADMIN_NAME
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.placeholders.adminname
            - name: FLYWAY_PLACEHOLDERS_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.placeholders.dbname
            - name: FLYWAY_PLACEHOLDERS_SCHEMA_NAME
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.placeholders.schemaname
            - name: FLYWAY_PLACEHOLDERS_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.placeholders.userpassword
            - name: FLYWAY_PLACEHOLDERS_SERVICE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.placeholders.servicepassword
            - name: FLYWAY_PLACEHOLDERS_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.placeholders.adminpassword
            - name: FLYWAY_PLACEHOLDER_PREFIX
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.placeholderPrefix
            - name: FLYWAY_PLACEHOLDER_SUFFIX
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.placeholderSuffix
            - name: FLYWAY_SKIP_DEFAULT_CALLBACKS
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.skipDefaultCallbacks
            - name: FLYWAY_TARGET
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.target
            - name: FLYWAY_OUT_OF_ORDER
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.outOfOrder
            - name: FLYWAY_VALIDATE_ON_MIGRATE
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.validateOnMigrate
            - name: FLYWAY_CLEAN_ON_VALIDATION_ERROR
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.cleanOnValidationError
            - name: FLYWAY_MIXED
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.mixed
            - name: FLYWAY_GROUP
              valueFrom:
                secretKeyRef:
                  name: dbinit
                  key: flyway.group
          resources: {{- toYaml .Values.resources.api | nindent 12 }}
      containers:
        - name: {{ .Values.name }}-api
          image: {{ .Values.images.registry }}/{{ .Values.images.org }}/{{ .Values.images.repo }}/{{ .Values.images.app.imageName }}:{{ .Values.images.app.tag }}
          imagePullPolicy: {{ .Values.images.app.imagePullPolicy }}
          ports: {{- toYaml .Values.ports | nindent 10 }}
          livenessProbe: {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe: {{- toYaml .Values.readinessProbe | nindent 12 }}
          env:
            - name: apiAuthKey01
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.api.apiKeySecret}}
                  key: {{ .Values.api.apiKey01 }}
            - name: apiAuthKey02
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.api.apiKeySecret}}
                  key: {{ .Values.api.apiKey02 }}
            - name: JAVA_OPTS
              value: -Xmx512m
            - name: POSTGRES_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretName }}
                  key: {{ .Values.postgres.urlKey }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretName }}
                  key: {{ .Values.postgres.usernameKey }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretName }}
                  key: {{ .Values.postgres.passwordKey }}
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretName }}
                  key: {{ .Values.postgres.dbnameKey }}
            - name: POSTGRES_SCHEMA
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretName }}
                  key: {{ .Values.postgres.schemaKey }}
            - name: SERVER_SERVLET_CONTEXTPATH
              value: /{{ .Values.name }}
            - name: STARTER_OPENAPI_SERVERURL
              value: /{{ .Values.name }}
            - name: JAVA_PROFILE
              value: -Dspring.profiles.include=compose
            - name: RABBITMQ_PLACEHOLDERS_HOST
              value: {{ .Chart.Name }}-rabbit-mq-service
          resources:
            requests:
              cpu: 150m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1024Mi
        - name: {{ .Values.name }}-assessclaimdc7101
          image: {{ .Values.images.registry }}/{{ .Values.images.org }}/{{ .Values.images.repo }}/{{ .Values.images.serviceAssessClaimDC7101.imageName }}:{{ .Values.images.serviceAssessClaimDC7101.tag }}
          imagePullPolicy: {{ .Values.images.serviceAssessClaimDC7101.imagePullPolicy }}
          env:
            - name: RABBITMQ_PLACEHOLDERS_HOST
              value: {{ .Chart.Name }}-rabbit-mq-service
            - name: RABBITMQ_PLACEHOLDERS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.secretName }}
                  key: {{ .Values.rabbitmq.usernameKey }}
            - name: RABBITMQ_PLACEHOLDERS_USERPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.secretName }}
                  key: {{ .Values.rabbitmq.passwordKey }}
          resources:
            requests:
              cpu: 150m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1024Mi
        - name: {{ .Values.name }}-assessclaimdc6602
          image: {{ .Values.images.registry }}/{{ .Values.images.org }}/{{ .Values.images.repo }}/{{ .Values.images.serviceAssessClaimDC6602.imageName }}:{{ .Values.images.serviceAssessClaimDC7101.tag }}
          imagePullPolicy: {{ .Values.images.serviceAssessClaimDC6602.imagePullPolicy }}
          env:
            - name: RABBITMQ_PLACEHOLDERS_HOST
              value: {{ .Chart.Name }}-rabbit-mq-service
            - name: RABBITMQ_PLACEHOLDERS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.secretName }}
                  key: {{ .Values.rabbitmq.usernameKey }}
            - name: RABBITMQ_PLACEHOLDERS_USERPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.secretName }}
                  key: {{ .Values.rabbitmq.passwordKey }}
          resources:
            requests:
              cpu: 150m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1024Mi
        - name: {{ .Values.name }}-pdfgenerator
          image: {{ .Values.images.registry }}/{{ .Values.images.org }}/{{ .Values.images.repo }}/{{ .Values.images.pdfGenerator.imageName }}:{{ .Values.images.pdfGenerator.tag }}
          imagePullPolicy: {{ .Values.images.pdfGenerator.imagePullPolicy }}
          env:
            - name: RABBITMQ_PLACEHOLDERS_HOST
              value: {{ .Chart.Name }}-rabbit-mq-service
            - name: RABBITMQ_PLACEHOLDERS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.secretName }}
                  key: {{ .Values.rabbitmq.usernameKey }}
            - name: RABBITMQ_PLACEHOLDERS_USERPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.secretName }}
                  key: {{ .Values.rabbitmq.passwordKey }}
            - name: REDIS_PLACEHOLDERS_HOST
              value: {{ .Chart.Name }}-redis-service
            - name: REDIS_PLACEHOLDERS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.secretName }}
                  key: {{ .Values.redis.passwordKey }}
          resources:
            requests:
              cpu: 150m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1024Mi
        - name: {{ .Values.name }}-service-data-access
          image: {{ .Values.images.registry }}/{{ .Values.images.org }}/{{ .Values.images.repo }}/{{ .Values.images.serviceDataAccess.imageName }}:{{ .Values.images.serviceDataAccess.tag }}
          imagePullPolicy: {{ .Values.images.serviceDataAccess.imagePullPolicy }}
          env:
            - name: RABBITMQ_PLACEHOLDERS_HOST
              value: {{ .Chart.Name }}-rabbit-mq-service
            - name: RABBITMQ_PLACEHOLDERS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.secretName }}
                  key: {{ .Values.rabbitmq.usernameKey }}
            - name: RABBITMQ_PLACEHOLDERS_USERPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.secretName }}
                  key: {{ .Values.rabbitmq.passwordKey }}
            - name: LH_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.name }}
                  key: {{ .Values.dataservice.lhPrivateKey }}
            - name: LH_ACCESS_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.name }}
                  key: {{ .Values.dataservice.lhAccessClientId }}
            - name: LH_ASSERTION_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.name }}
                  key: {{ .Values.dataservice.lhAssertionUrl }}
            - name: LH_TOKEN_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.name }}
                  key: {{ .Values.dataservice.lhTokenUrl }}
            - name: LH_FHIR_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.name }}
                  key: {{ .Values.dataservice.lhFhirUrl }}
          resources:
            requests:
              cpu: 150m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1024Mi