# This file is referenced from local.python.container-service-convention.
# It acts as the default Dockerfile for Python-based containers, i.e., those created by build.gradle
# that use the local.python.container-service-convention plugin.
# To override this file, create a src/docker/Dockerfile file in your Gradle module.
ARG BASE_IMAGE="python:3.10-alpine"
FROM ${BASE_IMAGE}

# hadolint ignore=DL3018
RUN apk update && apk --no-cache add expat=2.5.0-r0 && rm -rf /var/cache/apk/*

RUN adduser --no-create-home --disabled-password docker

HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=5 CMD [ "CMD-SHELL", "pgrep python || exit 1" ]

WORKDIR /project
ARG ENTRYPOINT_FILE
# Workaround to copy ENTRYPOINT_FILE that may not exist
# https://stackoverflow.com/a/46801962
# Copy script that runs entrypoint.sh if it exists, otherwise run jar file
COPY set-env-secrets.src entrypoint-default.sh ${ENTRYPOINT_FILE}* ./

# Used to specify the service folder you want to build if running locally
# No longer write *.pyc files to disk
ENV PYTHONDONTWRITEBYTECODE 1
# Send logs directly to container
ENV PYTHONUNBUFFERED 1

# === Image layers above this line are general and will be reused as cache when building the image.
# Put commands that produce project-specific image layers below this line.

# Copy over all files specified in local.python.container-service-convention
COPY . ./
RUN pip install --no-cache-dir -r requirements.txt

RUN chmod +x entrypoint*.sh && chown -R docker:docker .
USER docker
# The exec form of the Dockerfile ENTRYPOINT is used so that there is no shell wrapping the Java process.
# The advantage is that the java process responds to KILL signals sent to the container.
ENTRYPOINT ["/project/entrypoint-default.sh"]
