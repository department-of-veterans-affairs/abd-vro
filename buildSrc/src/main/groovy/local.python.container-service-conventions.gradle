/**
 * Provides docker container settings
 * Mimics local.java.container-conventions.gradle except for Python projects
 * Based on https://github.com/department-of-veterans-affairs/lighthouse-di-starter-boot/blob/main/buildSrc/src/main/groovy/starter.java.container-conventions.gradle
 */

plugins {
    id 'local.docker.container-conventions'
}

docker {
    // Refer to service-python/Dockerfile
    dockerfile file('../Dockerfile')

    // Copy files into build/docker/ folder, where the container image will be built
    copySpec.into(".").from("src"){
        exclude('docker')
    }
    copySpec.into(".").from("../"){
        include("*.py")
    }
}

def lintDockerfile = tasks.register('lintDockerfile', DefaultTask) {
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Use linter (default hadolint) to perform static analysis on Dockerfile"
    ext.binary = "hadolint"
    ext.targets = [ "../Dockerfile" ]
    ext.taskTimeout = 10000L
    def result = 0
    def sout = new StringBuilder()
    def serr = new StringBuilder()
    doLast {
        ext.targets.each { f ->
            def cmdLine = "${ext.binary} ${f}"
            def proc = cmdLine.execute(null, project.projectDir)
            proc.consumeProcessOutput(sout, serr)
            proc.waitForOrKill(ext.taskTimeout)
            result |= proc.exitValue()
        }
        if (result != 0 && serr) {
            ant.fail(serr) }
        else if (result != 0) {
            ant.fail(sout)
        }
        return result
    }
}

tasks.named("check").configure {
    dependsOn lintDockerfile
}

dockerRun {
    env 'RABBITMQ_PLACEHOLDERS_USERNAME': getEnvOrDefault('DB_SERVICE_PASSWORD', 'also-not-the-service-password'),
        'RABBITMQ_PLACEHOLDERS_USERPASSWORD': getEnvOrDefault('DB_USER_PASSWORD', 'also-not-the-user-password')
}
