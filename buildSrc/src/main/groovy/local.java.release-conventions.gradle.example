/**
 * Configurations for axion-release-plugin.
 */

plugins {
    id 'pl.allegro.tech.build.axion-release'
}
// Requires
// id 'starter.java.build-utils-property-conventions'

scmVersion {

    repository {
        // doc: Repository
        type = 'git' // type of repository
        directory = project.rootProject.file('./') // repository location
        remote = 'origin' // remote name

        // doc: Authorization
        customKey = getEnvOrDefault('GIT_AUTH_KEY', "customKeyDefault")
        customKeyPassword = getEnvOrDefault('GIT_SECRET_KEY', "secretKeyDefault") // key password
    }

    // doc: Dry run
//    localOnly = true // never connect to remote

    // doc: Uncommitted changes
    ignoreUncommittedChanges = false // should uncommitted changes force version bump

    // doc: Version / Tag with highest version
    useHighestVersion = true // Defaults as false, setting to true will find the highest visible version in the commit tree

    // doc: Version / Sanitization
    sanitizeVersion = true // should created version be sanitized, true by default

    // doc: Basic usage / Basic configuration
//    foldersToExclude = ['gradle'] // ignore changes in these subdirs when calculating changes to parent

    tag { // doc: Version / Parsing
        prefix = 'release' // prefix to be used, 'release' by default
//        branchPrefix = [ // set different prefix per branch
//                         'legacy/.*' : 'legacy'
//        ]

        versionSeparator = '-' // separator between prefix and version number, '-' by default
//        serialize = { tag, version -> ... } // creates tag name from raw version
//        deserialize = { tag, position, tagName -> ... } // reads raw version from tag
//        initialVersion = { tag, position -> ... } // returns initial version if none found, 0.1.0 by default
    }

    nextVersion { // doc: Next version markers
        suffix = 'SNAPSHOT' // tag suffix
        separator = '-' // separator between version and suffix
//        serializer = { nextVersionConfig, version -> ... } // append suffix to version tag
//        deserializer = { nextVersionConfig, position -> ... } // strip suffix off version tag
    }

    // doc: Version / Decorating
//    versionCreator { version, position -> ... } // creates version visible for Gradle from raw version and current position in scm
//    versionCreator 'versionWithBranch' // use one of predefined version creators
//    branchVersionCreator = [ // use different creator per branch
//                             'main/.*': 'default',
//                             'feature/.*': 'versionWithBranch'
//    ]

    // doc: Version / Incrementing
//    versionIncrementer {context, config -> ...} // closure that increments a version from the raw version, current position in scm and config
    versionIncrementer 'incrementPatch' // use one of predefined version incrementing rules
//    branchVersionIncrementer = [ // use different incrementer per branch
//                                 'main/.*': 'incrementMinor'
//                                 'feature/.*': 'incrementMinor'
//                                 'release.*/.*': 'incrementPatch'
//    ]

    // doc: Pre/post release hooks
//    createReleaseCommit true // should create empty commit to annotate release in commit history, false by default
//    releaseCommitMessage { version, position -> ... } // custom commit message if commits are created

    // doc: Pre-release checks
    checks {
        uncommittedChanges = true // permanently disable uncommitted changes check
        aheadOfRemote = false // permanently disable ahead of remote check
        snapshotDependencies = true // ensure no components depend on snapshot releases
    }
}

allprojects {
    project.version = scmVersion.version
}
