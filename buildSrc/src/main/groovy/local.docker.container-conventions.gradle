/**
 * Provides docker container settings
 * Based on https://github.com/department-of-veterans-affairs/lighthouse-di-starter-boot/blob/main/buildSrc/src/main/groovy/starter.java.container-conventions.gradle
 */

plugins {
    id 'base'
    id 'java'
    id 'com.palantir.docker'
    id 'com.palantir.docker-run'
    id 'com.palantir.docker-compose'
}
// Requires
// id 'starter.java.build-utils-property-conventions'

ext {
    dockerRegistry = project.hasProperty("dockerRegistry") ? "${project.dockerRegistry}" : "${group}"
    dockerImageVersion = project.hasProperty("buildNumber") ? "${project.version}-${project.buildNumber}" : project.version
}

docker {
    dependsOn(assemble)
    name "${dockerRegistry}/${rootProject.name}-${project.name}"
    tag "Build", "${dockerRegistry}/${rootProject.name}-${project.name}:${dockerImageVersion}"
    tag "Latest", "${dockerRegistry}/${rootProject.name}-${project.name}:latest"
    noCache false // Use image caches; only recreate if different

    if (file('src/docker/Dockerfile').exists())
        dockerfile file('src/docker/Dockerfile')
    else
        dockerfile new File(project.rootDir, 'buildSrc/docker-jre/Dockerfile')
}

dockerRun {
    name project.name
    image "${dockerRegistry}/${rootProject.name}-${project.name}"
    ports '8080:8080'
}

dockerCompose {
    dockerComposeFile 'src/docker/docker-compose.yml'
}

def dockerStart = tasks.register('dockerStart', DefaultTask) {
    group = "Docker Run"
    description = "Remove unused containers, build image, run container"
    dependsOn tasks.named("dockerPrune")
    dependsOn tasks.named("docker")
    dependsOn tasks.named("dockerRun")
}

def dockerPruneContainer = tasks.register('dockerPruneContainer', Exec) {
    group = "Docker"
    description = "Remove unused containers"
    executable "docker"
    args "container", "prune", "-f"
}

def dockerPruneImage = tasks.register('dockerPruneImage', Exec) {
    group = "Docker"
    description = "Remove unused images"
    executable "docker"
    args "image", "prune", "-f"
}

def dockerPruneVolume = tasks.register('dockerPruneVolume', Exec) {
    group = "Docker"
    description = "Remove unused volumes"
    executable "docker"
    args "volume", "prune", "-f"
}

def dockerPrune = tasks.register('dockerPrune', DefaultTask) {
    group = "Docker"
    description = "Stop container, then remove unused containers and images"
    mustRunAfter tasks.named('dockerStop')
    mustRunAfter tasks.named('dockerRemoveContainer')
    dependsOn dockerPruneContainer
    dependsOn dockerPruneImage
}

def dcPrune = tasks.register('dcPrune', DefaultTask) {
    group = "Docker Container"
    description = "Stop containers, then remove unused containers and images"
    mustRunAfter tasks.named('dockerComposeDown')
    dependsOn dockerPruneContainer
    dependsOn dockerPruneImage
}

def dcPruneVolume = tasks.register('dcPruneVolume', DefaultTask) {
    group = "Docker Container"
    description = "Stop containers, then remove unused volumes"
    mustRunAfter tasks.named('dockerComposeDown')
    dependsOn dockerPruneVolume
}

tasks.named("dockerRemoveContainer").configure {
    mustRunAfter tasks.named('dockerStop')
}

tasks.named("dockerComposeUp").configure {
    dependsOn tasks.named("docker")
}

tasks.named("dockerRun").configure {
    dependsOn tasks.named("docker")
}
