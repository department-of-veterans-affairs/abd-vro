name: Publish images to GHCR
description: Builds, tags, and publish VRO's Docker images

inputs:
  image_prefix:
    description: 'The prefix for the image name, e.g., "dev_" or "" (no prefix)'
    type: string
    default: 'dev_'
  image_tag:
    description: 'The tag/version for the image, e.g., first 7 of the commit hash or "" (blank) to use image_versions.src'
    type: string
  ghcr_username:
    description: 'GHCR username'
    type: string
    required: true
  ghcr_password:
    description: 'GHCR password or access token'
    type: string
    required: true
  run_tests:
    description: 'Run test before publishing images'
    type: boolean
    default: true

outputs:
  images_list:
    description: 'list of URLs to published images'
    value: ${{ steps.push-images.outputs.images }}

runs:
  using: composite
  steps:
    # Run build-images action to set up build env before testing code
    - name: "Build the images"
      uses: ./.github/actions/build-images

    - name: "Test code"
      if: inputs.run_tests == true
      shell: bash
      run: ./gradlew check

    - name: "Login to GitHub Container Registry"
      uses: docker/login-action@v2.1.0
      with:
        registry: ghcr.io
        username: ${{ inputs.ghcr_username }}
        password: ${{ inputs.ghcr_password }}

    - name: "Unpin changed pinned images"
      id: unpin-changed-pinned-images
      shell: bash
      run: |
        # Install container-diff needed by image-version.sh
        curl -LO https://storage.googleapis.com/container-diff/latest/container-diff-linux-amd64 && \
        mkdir -p "/tmp/bin" && \
        export PATH="/tmp/bin:$PATH" && \
        install container-diff-linux-amd64 /tmp/bin/container-diff

        # Unpin pinned images that have changed
        scripts/image-version.sh unpinIfDiff

        # Push any changes to image_versions.src -- https://stackoverflow.com/a/3879077
        git update-index --refresh || echo "Files changed"
        if ! git diff-index --quiet HEAD --; then
          git config user.name "VRO Machine User"
          git config user.email "abd-vro-machine@users.noreply.github.com"
          git add scripts/image_versions.src
          git commit -m "Automated: Unpin versions of updated images"
          # Push to both repos:
          git remote set-url --add origin https://github.com/department-of-veterans-affairs/abd-vro.git
          git push
        fi

    - name: "Tag and push images using commit hash and `latest`"
      id: push-images
      shell: bash
      run: |
        # GHCR_TOKEN is expected by imageTagExists
        export GHCR_TOKEN=$(echo ${{ inputs.ghcr_password }} | base64)

        echo "## Published images" >> $GITHUB_STEP_SUMMARY
        echo "images<<EOF" >> $GITHUB_OUTPUT
        source scripts/image_vars.src
        for PREFIX in "${VAR_PREFIXES_ARR[@]}"; do
          IMG_NAME="${{ inputs.image_prefix }}$(getVarValue "${PREFIX}" _IMG)"
          if [ "${{ inputs.image_tag }}" ]; then
            IMG_TAG="${{ inputs.image_tag }}"
          else
            IMG_TAG=$(getVarValue "${PREFIX}" _VER)
          fi
          echo "::group::Push image $IMG_NAME $IMG_TAG"
          if [ "$(imageTagExists "$IMG_NAME" "$IMG_TAG")" == "200" ]; then
            echo "Image already exists: $IMG_NAME $IMG_TAG; not overwriting"
            echo "* Image already exists, not overwriting: ${GHCR_PATH}:$IMG_TAG" >> $GITHUB_STEP_SUMMARY
          else
            GRADLE_IMG_NAME=$(getVarValue "${PREFIX}" _GRADLE_IMG)
            GHCR_PATH="ghcr.io/${{ github.repository }}/${IMG_NAME}"

            echo "Tagging '$GRADLE_IMG_NAME' as '$IMG_NAME:$IMG_TAG' and '$IMG_NAME:latest'"
            docker tag "$GRADLE_IMG_NAME" "${GHCR_PATH}:$IMG_TAG"
            docker push "${GHCR_PATH}:$IMG_TAG"

            docker tag "$GRADLE_IMG_NAME" "${GHCR_PATH}:latest"
            docker push "${GHCR_PATH}:latest"

            echo "* ${GHCR_PATH}:$IMG_TAG" >> $GITHUB_STEP_SUMMARY
            echo "${GHCR_PATH}:$IMG_TAG" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"
        done
        echo "EOF" >> $GITHUB_OUTPUT
        docker image list
