name: Publish images to GHCR
description: Builds, tags, and publish VRO's Docker images

inputs:
  image_prefix:
    description: 'The prefix for the image name, e.g., "dev_" or "" (no prefix)'
    type: string
    default: 'dev_'
  image_tag:
    description: 'The tag for the image, e.g., first 7 of the commit hash'
    type: string
  ghcr_username:
    description: 'GHCR username'
    type: string
    required: true
  ghcr_password:
    description: 'GHCR password or access token'
    type: string
    required: true
  run_tests:
    description: 'Run test before publishing images'
    type: string
    default: true


outputs:
  images_list:
    description: 'string formatted std JSON array of URLs to published images'
    value: ${{ steps.push-images.outputs.images }}

runs:
  using: composite
  steps:
    # Run build-images action to set up build env before testing code
    - name: "Build the images"
      uses: ./.github/actions/build-images

    - name: "Test code"
      if: inputs.run_tests == 'true'
      shell: bash
      run: ./gradlew check

    - name: "Login to GitHub Container Registry"
      uses: docker/login-action@v3.0.0
      with:
        registry: ghcr.io
        username: ${{ inputs.ghcr_username }}
        password: ${{ inputs.ghcr_password }}

    - name: "Tag and push images using commit hash and `latest`"
      id: push-images
      shell: bash
      run: |
        # GHCR_TOKEN is expected by imageTagExists
        export GHCR_TOKEN=$(echo ${{ inputs.ghcr_password }} | base64)

        echo "## Published images" >> "$GITHUB_STEP_SUMMARY"
        echo "images<<EOF" >> "$GITHUB_OUTPUT"
        echo -n "[" >> "$GITHUB_OUTPUT"
        source scripts/image_vars.src
        for PREFIX in "${VAR_PREFIXES_ARR[@]}"; do
          # This IMG_TAG value will cause a new image to be publish (and scanned by SecRel)
          IMG_TAG="${{ inputs.image_tag }}"

          IMG_NAME="${{ inputs.image_prefix }}$(getVarValue "${PREFIX}" _IMG)"
          echo "::group::Push image $IMG_NAME $IMG_TAG"
          GHCR_PATH="ghcr.io/${{ github.repository }}/${IMG_NAME}"
          if [ "$(imageTagExists "$IMG_NAME" "$IMG_TAG")" == "200" ]; then
            echo "Image already exists: $IMG_NAME:$IMG_TAG -- not overwriting"
            echo "* ($IMG_NAME:$IMG_TAG -- already exists, not overwriting)" >> "$GITHUB_STEP_SUMMARY"
          else
            GRADLE_IMG_NAME=$(getVarValue "${PREFIX}" _GRADLE_IMG)

            echo "Tagging '$GRADLE_IMG_NAME' as '$IMG_NAME:$IMG_TAG' and '$IMG_NAME:latest'"
            docker tag "$GRADLE_IMG_NAME" "${GHCR_PATH}:$IMG_TAG"
            docker push "${GHCR_PATH}:$IMG_TAG"

            docker tag "$GRADLE_IMG_NAME" "${GHCR_PATH}:latest"
            docker push "${GHCR_PATH}:latest"

            echo "* $IMG_NAME:$IMG_TAG" >> "$GITHUB_STEP_SUMMARY"
            echo -n "\"${GHCR_PATH}:$IMG_TAG\"" >> "$GITHUB_OUTPUT"

            # For all but the last image include a comma
            if [ ${PREFIX} != ${VAR_PREFIXES_ARR[-1]} ]; then
              echo -n "," >> "$GITHUB_OUTPUT"
            fi
          fi
          echo "::endgroup::"
        done

        echo "]" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"
        echo "$GITHUB_OUTPUT"
        docker image list
