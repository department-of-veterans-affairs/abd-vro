name: Build

on:
  # Trigger on all pull requests
  pull_request:
    branches:
      - "*"

  # Trigger when called by another GitHub Action
  workflow_call:
    secrets:
      ACCESS_TOKEN:
        required: true

  # Allow manual triggering
  workflow_dispatch:

env:
  GITHUB_ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      rabbitmq:
        image: rabbitmq:3.8
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      # Install all dependencies

      - name: Install Java build dependencies
        uses: ./.github/actions/install-build-dependencies

      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"
          cache: "pip"

      - name: "Install Python dependencies for DC7101"
        run: pip install -r service-python/assessclaimdc7101/src/requirements.txt

      - name: "Install Python dependencies for PDF Generator"
        run: pip install -r service-python/pdfgenerator/src/requirements.txt

      # Build and test

      - name: Build and test Java code
        run: ./gradlew build check -PGITHUB_ACCESS_TOKEN=${{ env.GITHUB_ACCESS_TOKEN }}

      - name: "Build and test Python code with test coverage report"
        run: cd service-python && python -m pytest --cov-report term-missing --cov=. --cov-fail-under=80 --cov-config=../.coveragerc

# This job doesn't seem relevant since VRO is runs entirely from images.
# We don't use the generated "fat jar" file at all.
# Leaving this job here until VRO completes SecRel pipeline.
#  build-docker-app:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout source code
#        uses: actions/checkout@v3
#
#      - uses: docker/setup-buildx-action@v2
#        id: buildx
#        with:
#          install: true
#
#      - name: Build docker-app
#        run: |
#          echo 'GITHUB_ACCESS_TOKEN=${{ secrets.ACCESS_TOKEN }}' > all-secrets.txt
# Builds using `./Dockerfile`, which runs `./gradlew assemble`, which creates an image that runs the generated "fat jar"
#          docker build . --no-cache --progress=plain --secret id=all-secrets,src=all-secrets.txt
#          rm all-secrets.txt

  build-docker-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true

      - name: Build Dockerfiles - base application
        run: |
          docker build -f ./app/src/docker/Dockerfile ./app/src/main/resources
          docker build -f ./db-init/src/docker/Dockerfile ./db-init/src/main/resources
          docker build -f ./container-init/src/docker/Dockerfile ./container-init/src/main/resources

      - name: Build Dockerfiles - Java microservice
        run: |
          docker build -f ./service-data-access/src/docker/Dockerfile ./service-data-access/src/main/resources

      - name: Build Dockerfiles - Python microservice
        run: |
          docker build -f ./service-python/pdfgenerator/src/docker/Dockerfile ./service-python/pdfgenerator/src
          docker build -f ./service-python/assessclaimdc7101/src/docker/Dockerfile ./service-python/assessclaimdc7101/src
          docker build -f ./service-python/assessclaimdc6602/src/docker/Dockerfile ./service-python/assessclaimdc6602/src

      # Reminder to also add new images to .github/secrel/config.yml
