name: "CI: Xample domain integration test"

on:
  # Allow manual triggering
  workflow_dispatch:

  # Allow being called by another GitHub Action
  workflow_call:

env:
  COMPOSE_PROFILES: ""

jobs:
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout source code"
        uses: actions/checkout@v4

      - name: "Build the images"
        uses: ./.github/actions/build-images

      - name: "Start the containers"
        run: |
          source scripts/setenv.sh
          export -p | sed 's/declare -x //'

          # create basic auth token for RabbitMQ and export to github environment
          BASIC_AUTH=$(echo "${RABBITMQ_USERNAME}:${RABBITMQ_PASSWORD}" | base64)
          {
            echo "RABBITMQ_USERNAME=${RABBITMQ_USERNAME}"
            echo "RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}"
            echo "RABBITMQ_BASIC_AUTH=${BASIC_AUTH}"
          } >> "$GITHUB_ENV"

          ./gradlew :dockerComposeUp
          ./gradlew :domain-xample:dockerComposeUp
          COMPOSE_PROFILES="" ./gradlew :app:dockerComposeUp

      - name: 'Wait for containers to start'
        run: sleep 60s
        shell: bash

      - name: 'Check for RabbitMQ to be ready'
        uses: department-of-veterans-affairs/curl-action@v1.0.0
        with:
          url: 'http://localhost:15672/api/vhosts'
          method: 'GET'
          basic-auth-token: '${{env.RABBITMQ_BASIC_AUTH}}'
          accept: 200
          # Retry every 2 seconds
          timeout: 2000
          # Quit after 60 seconds
          retries: 30
          log-response: true

      - name: 'Check queues of RabbitMQ'
        uses: department-of-veterans-affairs/curl-action@v1.0.0
        with:
          url: 'http://localhost:15672/api/queues'
          method: 'GET'
          basic-auth-token: '${{env.RABBITMQ_BASIC_AUTH}}'
          accept: 200
          # Retry every 2 seconds
          timeout: 2000
          # Quit after 60 seconds
          retries: 30
          log-response: true

      - name: "Wait for VRO to be ready"
        uses: nev7n/wait_for_response@v1
        with:
          url: 'http://localhost:8111/actuator/health'
          responseCode: 200
          # Retry every 2 seconds
          interval: 2000
          # Quit after 60 seconds
          timeout: 60000

      - name: "Run the integration test"
        run: |
          source scripts/setenv.sh

          # https://superuser.com/a/442395
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST "http://localhost:8110/v3/xample-resource" \
            -H "accept: application/json" -H "Content-Type: application/json" \
            -d '{"resourceId":"1234","diagnosticCode":"J"}')
          # Note: diagnosticCode must be J in order for the request to be routed to the svc-xample-j microservice,
          # as coded in Xample's Camel route (XampleRoutes.java#L130-L131).

          if [ "$STATUS_CODE" != 201 ]; then
            echo "Unexpected status code: $STATUS_CODE"
            exit 10
          fi

          ./gradlew -p domain-xample integrationTest

      - name: "Collect docker logs"
        if: always()
        uses: jwalton/gh-docker-logs@v2
        with:
          dest: './xample-itest-container-logs'

      - name: "Upload artifact"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xample-itest-container-logs
          path: ./xample-itest-container-logs/**
          retention-days: 14

      - name: "Check for errors in container logs"
        run: |
          if docker logs vro_xample-workflows_1 | grep 'ERROR'; then
            echo "Unexpected ERROR logs in xample-workflows container"
            exit 11
          fi
          if docker logs vro_svc-xample-j_1 | grep -B 25 -A 4 'ERROR\|WARN' | grep -v 'Simulated error'; then
            echo $(docker logs vro_svc-xample-j_1 | grep -A 5 "Failed tests:")
            echo "Unexpected ERROR logs in svc-xample-j container"
            exit 12
          fi

      - name: 'Check (again) status of RabbitMQ'
        if: always()
        uses: department-of-veterans-affairs/curl-action@v1.0.0
        with:
          url: 'http://localhost:15672/api/vhosts'
          method: 'GET'
          basic-auth-token: '${{env.RABBITMQ_BASIC_AUTH}}'
          accept: 200
          # Retry every 2 seconds
          timeout: 2000
          # Quit after 60 seconds
          retries: 30
          log-response: true

      - name: 'Check (again) queues of RabbitMQ'
        if: always()
        uses: department-of-veterans-affairs/curl-action@v1.0.0
        with:
          url: 'http://localhost:15672/api/queues'
          method: 'GET'
          basic-auth-token: '${{env.RABBITMQ_BASIC_AUTH}}'
          accept: 200
          # Retry every 2 seconds
          timeout: 2000
          # Quit after 60 seconds
          retries: 30
          log-response: true

      - name: "Clean shutdown of all containers"
        if: always()
        shell: bash
        run: |
          COMPOSE_PROFILES="all" ./gradlew dockerComposeDown
