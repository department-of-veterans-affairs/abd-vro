name: "CI: SVC BGS API integration test"

on:
  # Allow manual triggering
  workflow_dispatch:

  # Allow being called by another GitHub Action
  workflow_call:

concurrency:
  group: svcBgsApiIntegrationTest-${{ github.ref }}

env:
  COMPOSE_PROFILES: "svc"

jobs:
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout source code"
        uses: actions/checkout@v3

      - name: "Build the images"
        uses: ./.github/actions/build-images

      - name: "Start the containers"
        run: |
          source scripts/setenv.sh
          export -p | sed 's/declare -x //'
          
          # create basic auth token for RabbitMQ and export to github environment
          BASIC_AUTH=`echo "${RABBITMQ_PLACEHOLDERS_USERNAME}:${RABBITMQ_PLACEHOLDERS_USERPASSWORD}" | base64`
          echo "RABBITMQ_PLACEHOLDERS_USERNAME=${RABBITMQ_PLACEHOLDERS_USERNAME}" >> $GITHUB_ENV
          echo "RABBITMQ_PLACEHOLDERS_USERPASSWORD=${RABBITMQ_PLACEHOLDERS_USERPASSWORD}" >> $GITHUB_ENV
          echo "RABBITMQ_BASIC_AUTH=${BASIC_AUTH}" >> $GITHUB_ENV

          ./gradlew :dockerComposeUp
          ./gradlew :app:dockerComposeUp

      - name: "Wait for RabbitMQ to be ready"
        uses: indiesdev/curl@v1.1
        with:
          url: 'http://localhost:15672/api/vhosts'
          method: 'GET'
          basic-auth-token: '${{env.RABBITMQ_BASIC_AUTH}}'
          accept: 200
          # Retry every 2 seconds
          timeout: 2000
          # Quit after 60 seconds
          retries: 30

      - name: "Create bgs-api exchange"
        uses: indiesdev/curl@v1.1
        with:
          url: 'http://localhost:15672/api/exchanges/%2f/bgs-api'
          method: 'PUT'
          basic-auth-token: '${{env.RABBITMQ_BASIC_AUTH}}'
          body: '{"type":"direct", "durable":true, "auto_delete":true}'
          accept: 201, 204
          retries: 3
          log-response: true

      - name: "Create add-note queue"
        uses: indiesdev/curl@v1.1
        with:
          url: 'http://localhost:15672/api/queues/%2f/add-note'
          method: 'PUT'
          basic-auth-token: '${{env.RABBITMQ_BASIC_AUTH}}'
          body: '{"durable":true, "auto_delete":true}'
          accept: 201, 204
          retries: 3
          log-response: true

      - name: "Create binding for add-note queue to bgs-api exchange "
        uses: indiesdev/curl@v1.1
        with:
          url: 'http://localhost:15672/api/bindings/%2f/e/bgs-api/q/add-note'
          method: 'POST'
          basic-auth-token: '${{env.RABBITMQ_BASIC_AUTH}}'
          body: '{"routing_key":"add-note","arguments":{}}'
          accept: 201, 204
          retries: 3
          log-response: true

      - name: "Create add-note-response Queue"
        uses: indiesdev/curl@v1.1
        with:
          url: 'http://localhost:15672/api/queues/%2f/add-note-response'
          method: 'PUT'
          basic-auth-token: '${{env.RABBITMQ_BASIC_AUTH}}'
          body: '{"durable":true, "auto_delete":true}'
          accept: 201, 204
          retries: 3
          log-response: true

      - name: "Create binding for add-note-response queue to bgs-api exchange "
        uses: indiesdev/curl@v1.1
        with:
          url: 'http://localhost:15672/api/bindings/%2f/e/bgs-api/q/add-note-response'
          method: 'POST'
          basic-auth-token: '${{env.RABBITMQ_BASIC_AUTH}}'
          body: '{"routing_key":"add-note-response","arguments":{}}'
          accept: 201, 204
          retries: 3
          log-response: true

      - name: "Send Message to RabbitMQ"
        uses: indiesdev/curl@v1.1
        with:
          url: 'http://localhost:15672/api/exchanges/%2F/bgs-api/publish'
          method: 'POST'
          basic-auth-token: '${{env.RABBITMQ_BASIC_AUTH}}'
          body: '{"properties": {"delivery_mode": 1,"reply_to": "add-note-response","correlation_id": "1234"},"routing_key": "add-note","payload": "{\\\"veteranNote\\\":\\\"test\\\",\\\"veteranParticipantId\\\":111}","payload_encoding": "string"}'
          accept: 200
          retries: 3
          log-response: true

      - name: "Send Message to RabbitMQ"
        if: always()
        run: |
          # create bgs-api exchange
          STATUS_CODE=$( \
            curl -s  -w "%{http_code}" \
            -X PUT http://localhost:15672/api/exchanges/%2f/bgs-api \
            -u "${RABBITMQ_PLACEHOLDERS_USERNAME}:${RABBITMQ_PLACEHOLDERS_USERPASSWORD}" \
            -H "content-type:application/json" \
            -d'{"type":"direct", "durable":true, "auto_delete":true}' \
          )
          
          if [ "$STATUS_CODE" != 201 ] && [ "$STATUS_CODE" != 204 ]; then
            echo "Unexpected status code when creating bgs-api exchange: $STATUS_CODE"
            exit 10
          fi
          
          # create add-note queue
          STATUS_CODE=$( \
          curl -s -o /dev/null -w "%{http_code}" \
          -X PUT http://localhost:15672/api/queues/%2f/add-note \
          -u "${RABBITMQ_PLACEHOLDERS_USERNAME}:${RABBITMQ_PLACEHOLDERS_USERPASSWORD}" \
          -H "content-type:application/json" \
          -d'{"durable":true, "auto_delete":true}'
          )
          
          if [ "$STATUS_CODE" != 201 ] && [ "$STATUS_CODE" != 204 ]; then
            echo "Unexpected status code when creating add-note queue: $STATUS_CODE"
            exit 10
          fi
          
          # create reply queue
          STATUS_CODE=$( \
            curl -s -o /dev/null -w "%{http_code}" \
            -X PUT http://localhost:15672/api/queues/%2f/add-note-response \
            -u "${RABBITMQ_PLACEHOLDERS_USERNAME}:${RABBITMQ_PLACEHOLDERS_USERPASSWORD}" \
            -H "content-type:application/json" \
            -d'{"durable":true, "auto_delete":true}' \
          )
          
          if [ "$STATUS_CODE" != 201 ] && [ "$STATUS_CODE" != 204 ]; then
            echo "Unexpected status code when creating add-note-response queue: $STATUS_CODE"
            exit 10
          fi
          
          # create add-note binding
          STATUS_CODE=$( \
            curl -s -o /dev/null -w "%{http_code}" \
            -X POST http://localhost:15672/api/bindings/%2f/e/bgs-api/q/add-note \
            -u "${RABBITMQ_PLACEHOLDERS_USERNAME}:${RABBITMQ_PLACEHOLDERS_USERPASSWORD}" \
            -H "content-type:application/json" \
            -d'{"routing_key":"add-note","arguments":{}}'
          )
          
          if [ "$STATUS_CODE" != 201 ] && [ "$STATUS_CODE" != 204 ]; then
            echo "Unexpected status code when creating binding add-note -> bgs-api: $STATUS_CODE"
            exit 10
          fi
          
          # create add-note-response binding
          STATUS_CODE=$( \
            curl -s -o /dev/null -w "%{http_code}" \
            -X POST http://localhost:15672/api/bindings/%2f/e/bgs-api/q/add-note-response \
            -u "${RABBITMQ_PLACEHOLDERS_USERNAME}:${RABBITMQ_PLACEHOLDERS_USERPASSWORD}" \
            -H "content-type:application/json" \
            -d'{"routing_key":"add-note-response","arguments":{}}'
          )
          
          if [ "$STATUS_CODE" != 201 ] && [ "$STATUS_CODE" != 204 ]; then
            echo "Unexpected status code when creating binding add-note-response -> bgs-api: $STATUS_CODE"
            exit 10
          fi
          
          STATUS_CODE=$( \
            curl -s -o /dev/null -w "%{http_code}" \
            -X POST http://localhost:15672/api/exchanges/%2F/bgs-api/publish \
            -H "Accept:application/json" -H "Content-Type:application/json" -w "%{http_code}" \
            -u "${RABBITMQ_PLACEHOLDERS_USERNAME}:${RABBITMQ_PLACEHOLDERS_USERPASSWORD}" \
            -d'{
            "properties": {
              "delivery_mode": 1,
              "reply_to": "add-note-response",
              "correlation_id": "1234"
            },
            "routing_key": "add-note",
            "payload": "{\"veteranNote\":\"test\",\"veteranParticipantId\":111}",
            "payload_encoding": "string"
            }'
          )
        
          if [ "$STATUS_CODE" != 200 ]; then
            echo "Unexpected status code: $STATUS_CODE"
            exit 10
          fi

      - name: "Get Message from RabbitMQ and Validate"
        uses: indiesdev/curl@v1.1
        with:
          url: "http://localhost:15672/api/queues/%2f/add-note-response/get"
          method: "POST"
          basic-auth-token: '${{env.RABBITMQ_BASIC_AUTH}}'
          headers: '{"accept":"application/json","content-type":"application/json"}'
          body: '{"count":1,"ackmode":"ack_requeue_true","encoding":"auto"}'
          accept: 200
          retries: 3
          log-response: true

      - name: "Clean shutdown of all containers"
        if: always()
        shell: bash
        run: |
          docker ps
          COMPOSE_PROFILES="all" ./gradlew dockerComposeDown
