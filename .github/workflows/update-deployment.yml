name: "1. (Internal) Update Deployment"

on:
  workflow_dispatch:
    inputs:
      target_env:
        description: 'Target LHDI environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - qa
        - sandbox
        - prod-test
        - prod

      helm_chart:
        description: 'Helm chart to deploy'
        required: true
        type: choice
        options:
        - api-gateway
        - platform
        - vro-svcs
        - vro-app

      image_tag:
        description: 'First 7 of the commit hash, "latest", "v1.2.3", or "release-1.2.3"'
        required: true
        default: 'latest'
        type: string

      # Other deployment options
      rollback:
        description: 'If deploy fails, rollback to previous? (Always true for prod)'
        required: true
        type: boolean
        default: false
      shutdown:
        description: 'Shut down deployment completely, then redeploy (For emergency use)'
        required: true
        type: boolean
        default: false

      # VRO Platform options
      postgres:
        description: '(Platform chart only) Enable DB'
        required: true
        type: boolean
        default: true
      rabbitmq:
        description: '(Platform chart only) RabbitMQ image tag'
        required: true
        default: 3
        type: choice
        options:
        - latest
        - 3
        - (disable)
      redis:
        description: '(Platform chart only) Redis image tag'
        required: true
        default: 7
        type: choice
        options:
        - latest
        - 7
        - (disable)
      console:
        description: '(Platform chart only) Enable VRO Console'
        required: true
        type: boolean
        default: false

  # Allow other workflows to call this one
  workflow_call:
    inputs:
      target_env:
        required: true
        type: string
      helm_chart:
        required: true
        type: string
      image_tag:
        required: true
        type: string

      postgres:
        required: false
        type: boolean
        default: true
      rabbitmq:
        required: false
        type: string
        default: "latest"
      redis:
        required: false
        type: string
        default: "latest"
      console:
        required: false
        type: boolean
        default: false

      rollback:
        required: false
        type: boolean
        default: false
      shutdown:
        required: false
        type: boolean
        default: false

env:
  # Id for the #benefits-vro-devops Slack channel
  SLACK_CHANNEL: C04CA47HV96
  RELEASE_NAME: "vro-${{ inputs.helm_chart }}"

jobs:
  update-deployment:
    # Required secrets are set in the specific repo
    if: github.repository == 'department-of-veterans-affairs/abd-vro-internal'
    runs-on: ubuntu-latest
    steps:
      - name: "Slack: workflow triggered"
        id: notify-slack
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-text: ":rocket: \
            <${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}|\
            Updating deployment (#${{ github.run_number }})> \
            in *${{ inputs.target_env }}* with images tagged `${{ inputs.image_tag }}`...\n\
            (caused by `${{github.event_name}}` triggered by `${{github.triggering_actor}}`)\n"

      - name: "Set up kube config"
        id: kube-setup
        run: |
          mkdir ~/.kube
          case "${{ inputs.target_env }}" in
            dev|qa|sandbox) KUBE_CONFIG="${{ secrets.DEV_KUBE_CONFIG }}";;
            prod-test|prod) KUBE_CONFIG="${{ secrets.PROD_KUBE_CONFIG }}";;
          esac
          echo -n "${KUBE_CONFIG}" | base64 -d > ~/.kube/config
          chmod go-rwx ~/.kube/config

#          echo "==================================="
#          if helm list -n va-abd-rrd-${{ inputs.target_env }} | grep "^${{ env.RELEASE_NAME }} "; then
#            helm get values ${{ env.RELEASE_NAME }} -n va-abd-rrd-${{ inputs.target_env }}
#            kubectl -n va-abd-rrd-${{ inputs.target_env }} get pods --show-labels
#
#            echo '## Before update' >> $GITHUB_STEP_SUMMARY
#            echo '```' >> $GITHUB_STEP_SUMMARY
#            helm get values ${{ env.RELEASE_NAME }} -n va-abd-rrd-${{ inputs.target_env }} >> $GITHUB_STEP_SUMMARY
#            echo '```' >> $GITHUB_STEP_SUMMARY
#
#            HELM_VALUES=$(helm get values ${{ env.RELEASE_NAME }} --all -n va-abd-rrd-${{ inputs.target_env }} -o json)
#            echo "helm_values=$HELM_VALUES" >> $GITHUB_OUTPUT
#            # Show values with an `enabled` key
#            # echo $HELM_VALUES | jq '. | with_entries(select(.value.enabled!=null))'
#          else
#            echo "No existing Helm release; creating a new Helm release: ${{ env.RELEASE_NAME }}"
#            # Set helm_values so that subsequent steps that access it don't fail
#            echo 'helm_values={ "postgres": { "enabled": false } }' >> $GITHUB_OUTPUT
#          fi

      - name: "Checkout source code"
        uses: actions/checkout@v3

      - name: "Slack thread: Post deploying message"
        # Post in thread to reduce clutter in Slack
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-optional-thread_ts: ${{ fromJson(steps.notify-slack.outputs.slack-result).response.message.ts }}
          slack-text: ":panda_angel: Deploying *${{ inputs.helm_chart }}* Helm chart:\n\
            - rabbitmq: *${{ inputs.rabbitmq }}*\n\
            - postgres: *${{ inputs.postgres }}*\n\
            - redis: *${{ inputs.redis }}*\n\
            - console: ${{ inputs.console }}\n\
            Rollback if chart deployment fails: ${{ inputs.rollback }}\n\
            Shutdown chart before deployment: ${{ inputs.shutdown }}"
      - name: "Deploy '${{ inputs.image_tag }}' to ${{ inputs.target_env }} env"
        run: |
          echo "::group::Upgrading Helm chart: ${{inputs.helm_chart}}"

          export ROLLBACK=${{ inputs.rollback }}
          export RABBITMQ_VER=${{ inputs.rabbitmq }}
          export REDIS_VER=${{ inputs.redis }}

          export ENABLE_POSTGRES=${{ inputs.postgres }}
          export ENABLE_CONSOLE=${{ inputs.console }}

          export K8SINFO=true
          export WAIT_TIMEOUT="10m"
          helm/deploy.sh "${{inputs.target_env}}" "${{inputs.helm_chart}}" "${{inputs.image_tag}}"
          echo "::endgroup::"

          echo '## After update' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          helm get values ${{ env.RELEASE_NAME }} -n va-abd-rrd-${{ inputs.target_env }} >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: "Slack thread: Post failed status message"
        if: failure()
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-optional-thread_ts: ${{ fromJson(steps.notify-slack.outputs.slack-result).response.message.ts }}
          slack-text: ":panda_cry: Failed deployment to *${{ inputs.target_env }}*"
      - name: "Slack emoji: React failure on top-level Slack notification"
        if: failure()
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-function: send-reaction
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-message-timestamp: ${{ fromJson(steps.notify-slack.outputs.slack-result).response.message.ts }}
          slack-emoji-name: 'x'

      - name: "Slack thread: Post success status message"
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-optional-thread_ts: ${{ fromJson(steps.notify-slack.outputs.slack-result).response.message.ts }}
          slack-text: ":panda_duck_yay: Completed deployment to ${{ inputs.target_env }}"
      - name: "Slack emoji: React success on top-level Slack notification"
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-function: send-reaction
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-message-timestamp: ${{ fromJson(steps.notify-slack.outputs.slack-result).response.message.ts }}
          slack-emoji-name: 'tada'
