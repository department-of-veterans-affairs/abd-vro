name: "1. Update Deployment"

on:
  workflow_dispatch:
    inputs:
      target_env:
        description: 'Target LHDI environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - qa
        - sandbox
        - prod-test
        - prod

      image_tag:
        description: 'First 7 of the commit hash, "latest", or "release-1.2.3"'
        required: true
        default: 'latest'
        type: string

      rollback:
        description: 'If deploy fails, rollback to previous? (Always true for prod)'
        required: true
        default: false
        type: boolean

      restart:
        description: 'Shut down current deployment completely, then deploy'
        required: true
        default: false
        type: boolean

      vro-app:
        description: 'Enable & update VRO Application API'
        required: true
        type: boolean
        default: true

      domain-rrd:
        description: "Enable & update domain RRD's microservices"
        required: true
        type: boolean
        default: true

      rabbitmq:
        description: 'Enable & update MQ'
        required: true
        type: boolean
        default: true

      postgres:
        description: 'Enable & update DB'
        required: true
        type: boolean
        default: true

      redis:
        description: 'Enable & update Redis'
        required: true
        type: boolean
        default: true

      console:
        description: 'Enable & update VRO Console'
        required: true
        type: boolean
        default: false

  # Allow other workflows to call this one
  workflow_call:
    inputs:
      target_env:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      rollback:
        required: true
        type: boolean

env:
  SLACK_BOT_ACCESS_TOKEN_DEVOPS: ${{ secrets.SLACK_BOT_ACCESS_TOKEN_DEVOPS }}
  RELEASE_NAME: vro

jobs:
  update-deployment:
    if: github.repository == 'department-of-veterans-affairs/abd-vro'
    runs-on: ubuntu-latest
    steps:
      - name: "Set up kube config"
        run: |
          mkdir ~/.kube
          case "${{ inputs.target_env }}" in
            dev|qa|sandbox) KUBE_CONFIG="${{ secrets.DEV_KUBE_CONFIG }}";;
            prod-test|prod) KUBE_CONFIG="${{ secrets.PROD_KUBE_CONFIG }}";;
          esac
          echo -n "${KUBE_CONFIG}" | base64 -d > ~/.kube/config
          chmod go-rwx ~/.kube/config

      - name: "Checkout source code"
        uses: actions/checkout@v3

      - name: "Shutting down deployment in ${{ inputs.target_env }} env"
        if: ${{ inputs.restart }}
        run: helm del ${{ env.RELEASE_NAME }} --wait -n va-abd-rrd-${{ inputs.target_env }}

      - name: "Workaround for postgres StatefulSet"
        if: ${{ ! inputs.restart }} && ${{ inputs.postgres }}
        run: |
          # Delete StatefulSets without deleting pods
          # Workaround for helm upgrade reporting error due to StatefulSets:
          #   Error: UPGRADE FAILED: cannot patch "vro-postgres" with kind StatefulSet:
          #     Forbidden: updates to statefulset spec for fields other than ...
          # See https://github.com/helm/helm/issues/2149#issuecomment-341701817
          kubectl delete statefulsets vro-postgres -n va-abd-rrd-${{ inputs.target_env }} --cascade=orphan || \
            echo "It's ok if statefulset vro-postgres doesn't exist."

      - name: "Deploy ${{ inputs.image_tag }} to ${{ inputs.target_env }} env"
        run: |
          HELM_ARGS=""

          VALUES_FILE="helm/values-for-${{ inputs.target_env }}.yaml"
          if [ -e "${VALUES_FILE}" ]; then
            HELM_ARGS="$HELM_ARGS -f $VALUES_FILE"
          fi

          if [ "${{ inputs.rollback }}" == "true" ] || [ "${{ inputs.target_env }}" == "prod" ]; then
            HELM_ARGS="$HELM_ARGS --atomic"
          fi

          echo "HELM_ARGS: $HELM_ARGS"
          helm upgrade ${{ env.RELEASE_NAME }} helm/ \
            --install --wait -n va-abd-rrd-${{ inputs.target_env }} \
            ${HELM_ARGS} \
            --set-string global.environment=${{ inputs.target_env }} \
            --set-string global.imageTag=${{ inputs.image_tag }} \
            --set-string global.commitSha=${GITHUB_SHA} \
            --set vro-app.enabled=${{ inputs.vro-app }} \
            --set domain-rrd.enabled=${{ inputs.domain-rrd }} \
            --set rabbitmq.enabled=${{ inputs.rabbitmq }} \
            --set postgres.enabled=${{ inputs.postgres }} \
            --set redis.enabled=${{ inputs.redis }} \
            --set console.enabled=${{ inputs.console }}

# TODO: Add Slack notifications
