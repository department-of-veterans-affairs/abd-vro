name: 'CI: BIE Kafka End 2 End Test with Mock'

on:
  # Allow manual triggering
  workflow_dispatch:

  # Allow being called by another GitHub Action
  workflow_call:

concurrency:
  group: bieKafkaEnd2EndTestWithMock-${{ github.ref }}

env:
  COMPOSE_PROFILES: 'kafka'
  TEST_TOPIC: 'TST_CONTENTION_BIE_CONTENTION_ASSOCIATED_TO_CLAIM_V02'
  # TEST_DATA should be replaced with data after event_details is populated with non PII data. See Github Issue 1680
  TEST_DATA: 'Lorem ipsum'

jobs:
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: 'Install kcat and postgresql'
        run: |
          sudo apt-get update
          sudo apt-get install kafkacat
          which kafkacat

          sudo apt-get install postgresql
          which psql

      - name: 'Checkout source code'
        uses: actions/checkout@v3

      - name: 'Build the images'
        uses: ./.github/actions/build-images

      - name: 'Start the containers'
        run: |
          source scripts/setenv.sh

          # create basic auth token for RabbitMQ and export to github environment
          BASIC_AUTH=`echo "${RABBITMQ_PLACEHOLDERS_USERNAME}:${RABBITMQ_PLACEHOLDERS_USERPASSWORD}" | base64`
          echo "RABBITMQ_PLACEHOLDERS_USERNAME=${RABBITMQ_PLACEHOLDERS_USERNAME}" >> $GITHUB_ENV
          echo "RABBITMQ_PLACEHOLDERS_USERPASSWORD=${RABBITMQ_PLACEHOLDERS_USERPASSWORD}" >> $GITHUB_ENV
          echo "RABBITMQ_BASIC_AUTH=${BASIC_AUTH}" >> $GITHUB_ENV
          echo "POSTGRES_USER=${POSTGRES_USER}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> $GITHUB_ENV

          export -p | sed 's/declare -x //'

          ./gradlew :dockerComposeUp

          ./gradlew -p mocks :mock-bie-kafka:docker
          ./gradlew -p mocks :dockerComposeUp

          ./gradlew :domain-xample:dockerComposeUp
          ./gradlew :app:dockerComposeUp

      - name: 'Wait for RabbitMQ to be ready'
        uses: indiesdev/curl@v1.1
        with:
          url: 'http://localhost:15672/api/vhosts'
          method: 'GET'
          basic-auth-token: '${{env.RABBITMQ_BASIC_AUTH}}'
          accept: 200
          # Retry every 2 seconds
          timeout: 2000
          # Quit after 60 seconds
          retries: 30

      - name: 'Wait for Kafka to be ready'
        run: |
          # Verify broker is up
          BROKER_QUERY=$(kafkacat -m 30 -b localhost:9094 -L)
          if echo $BROKER_QUERY | grep -q '1 brokers'
          then
            echo "Found Broker: $BROKER_QUERY"
          else
            echo "Count not find Kafka broker"
          fi

      - name: 'Wait for xample-workflow to be ready'
        uses: nev7n/wait_for_response@v1
        with:
          url: 'http://localhost:10021/actuator/health'
          responseCode: 200
          # Retry every 2 seconds
          interval: 2000
          # Quit after 60 seconds
          timeout: 60000

      - name: 'Wait for svc-bie-kafka to be ready'
        uses: nev7n/wait_for_response@v1
        with:
          url: 'http://localhost:10301/actuator/health'
          responseCode: 200
          # Retry every 2 seconds
          interval: 2000
          # Quit after 60 seconds
          timeout: 60000

      - name: 'Create Kafka topic and send message'
        run: |
          # Create Test File:
          echo '${{env.TEST_DATA}}' > test.txt
          echo "Producing message from test.txt on ${{env.TEST_TOPIC}}: "
          cat test.txt

          # Create Topic and Produce message on test topic
          kafkacat -b localhost:9094 -P -t '${{env.TEST_TOPIC}}' -l test.txt

      - name: 'Sleep to give time for message to travel end to end from kafka to saved in database'
        run: sleep 5

      - name: 'Find entry in Postgres'
        run: |
          psql postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/vro -c \
          "SELECT *
            FROM
              claims.bie_contention_event
          "

          RESULTS=$(psql postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/vro -x -c \
          "SELECT COUNT(*)
            FROM
              claims.bie_contention_event
            WHERE
              event='${{env.TEST_TOPIC}}'
                AND
              event_details='${{env.TEST_DATA}}'
          ")
          echo $RESULTS
          if echo $RESULTS | grep -q 'count | 1'
          then
            echo "Found record in DB."
          else
            echo "Could not find record in DB."
            exit 10
          fi

      - name: "Collect docker logs"
        if: always()
        uses: jwalton/gh-docker-logs@v2
        with:
          dest: './bie-kafka-end2end-test-with-mock-container-logs'

      - name: "Upload artifact"
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: bie-kafka-end2end-test-with-mock-container-logs
          path: ./bie-kafka-end2end-test-with-mock-container-logs/**
          retention-days: 14


      - name: 'Clean shutdown of all containers'
        if: always()
        shell: bash
        run: |
          docker ps
          COMPOSE_PROFILES="all" ./gradlew dockerComposeDown
          ./gradlew -p mocks :dockerComposeDown
