name: "SecRel 4"

on:
  # Trigger on every code push to main and develop branches
  push:
    branches: [ main, qa, develop ]

  # Trigger on all published GitHub Releases
  release:
    types: [ "created" ]

  # Allow manual runs
  workflow_dispatch:

env:
  IMAGE_PREFIX: 'dev_'
  RUN_TESTS: 'true'

  # Id for the #benefits-vro-devops Slack channel
  SLACK_CHANNEL: C04CA47HV96

jobs:
  publish-images:
    # only run for the internal repo
    if: github.repository == 'department-of-veterans-affairs/abd-vro-internal'
    outputs:
      vro-images: ${{ steps.publish-images.outputs.images_list }}
    runs-on: ubuntu-latest
    steps:
      - name: "Determine image prefix"
        run: |
          echo "ref_name: ${{ github.ref_name }}"
          IMAGE_PREFIX=dev
          GRADLE_TESTS=true
          case "${{ github.ref_name }}" in
            main)      IMAGE_PREFIX="";;
            release-*) IMAGE_PREFIX="";;
            develop)   GRADLE_TESTS=false;;
          esac
          echo "IMAGE_PREFIX=${IMAGE_PREFIX}" >> $GITHUB_ENV
          echo "RUN_TESTS=${GRADLE_TESTS}" >> $GITHUB_ENV

      - name: "DEBUG step"
        run: |
          echo "IMAGE_PREFIX: ${{ env.IMAGE_PREFIX }}"
          echo "RUN_TESTS: ${{ env.RUN_TESTS }}"

      - name: "Checkout source code"
        uses: actions/checkout@v3

      - name: "Publish ${{ env.IMAGE_PREFIX }} images to GHCR"
        id: publish-images
        uses: ./.github/actions/publish-images
        with:
          image_prefix: ${{ env.IMAGE_PREFIX }}
          access_token: ${{ secrets.ACCESS_TOKEN_GRADLE_BUILD }}
          ghcr_username: ${{ github.actor }}
          ghcr_password: ${{ secrets.GITHUB_TOKEN }}
          run_tests: ${{ env.RUN_TESTS }}

  images-for-secrel:
    runs-on: ubuntu-latest
    needs:
      - publish-images
    outputs:
      all-images: ${{ steps.append-images.outputs.all-images }}
    steps:
      - name: "Append 3rd-party images"
        id: append-images
        run: |
          echo "all-images<<EOF" >> $GITHUB_OUTPUT
          echo "${{ needs.publish-images.outputs.vro-images }}" >> $GITHUB_OUTPUT
          MANUAL_IMGS_ARRAY=( vro-rabbitmq:latest vro-redis:latest )
          for MANUAL_IMAGE in ${MANUAL_IMGS_ARRAY[@]}; do
            # SecRel will not sign images outside the scope of the repository that's calling SecRel,
            # so the image must exist in abd-vro-internal
            echo "ghcr.io/department-of-veterans-affairs/abd-vro-internal/${MANUAL_IMAGE}" >> $GITHUB_OUTPUT
          done
          echo "EOF" >> $GITHUB_OUTPUT

  debug-job:
    runs-on: ubuntu-latest
    needs: [publish-images, images-for-secrel]
    steps:
      - name: show vars
        run: |
          echo "ref_name: ${{github.ref_name}}"
          echo "publish-images: ${{ needs.publish-images.outputs.vro-images }}"
          echo "all-images: ${{ needs.images-for-secrel.outputs.all-images }}"

  secrel:
    # only run for the internal repo -- SecRel doesn't work on public repos
    if: github.repository == 'department-of-veterans-affairs/abd-vro-internal'
    name: SecRel Pipeline
    needs: [publish-images, images-for-secrel]
    uses: department-of-veterans-affairs/lighthouse-tornado-secrel-pipeline/.github/workflows/pipeline.yml@v4.1.0
    with:
      config-file: .github/secrel/config4.yml
      images: ${{ needs.images-for-secrel.outputs.all-images }}
    secrets: inherit

  notify-secrel-error:
    if: failure()
    needs: secrel
    runs-on: ubuntu-latest

    steps:
      - name: "Notify Slack on SecRel Failure"
        uses: archive/github-actions-slack@v2.6.0
        # only run for the internal repo
        if: ${{ github.repository == 'department-of-veterans-affairs/abd-vro-internal' }}
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-text: ":redlight: SecRel scan <${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}|failed>! \n\
              ${{github.ref_type}} `${{github.ref_name}}` (`${{github.sha}}`), \n\
              caused by `${{github.event_name}}` triggered by `${{github.triggering_actor}}` ..."
