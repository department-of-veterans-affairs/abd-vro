name: Deploy secrets from Vault

on:
  # manual run
  workflow_dispatch:
    inputs:
      target_env:
        description: 'Target LHDI environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - qa
        - sandbox
        - prod-test
        - prod

jobs:
  from-vault:
    runs-on: [ self-hosted, Linux, vro-runner ]
    permissions:
      contents: read
      packages: write
    steps:
      # - name: "secret list"
      - name: "Get secrets from vault"
        id: vault-secrets
        uses: hashicorp/vault-action@v2.5.0
        with:
          url: https://ldx-mapi.lighthouse.va.gov
          # The base64 encoded CA Certificate provided by LHDI
          caCertificate: ${{ secrets.VAULT_CA_CERT }}
          # The VAULT_TOKEN expires in 1 month; copy it from the Vault UI
          token: ${{ secrets.VAULT_TOKEN }}
          method: token
          exportEnv: true
          # TODO: don't skip verify
          tlsSkipVerify: true
          secrets: |
            va-abd-rrd/deploy/default/db $.$ | DB_SECRETS ;
            va-abd-rrd/deploy/qa $.$ | QA_DB_SECRETS ;
            va-abd-rrd/deploy/default/db DB_SUPERUSER_NAME ;
            va-abd-rrd/deploy/default/db DB_SUPERUSER_NAME ;
            va-abd-rrd/deploy/default/db DB_SUPERUSER_PASS ;
            va-abd-rrd/deploy/default/db DB_FLYWAYUSER_NAME ;
            va-abd-rrd/deploy/default/db DB_FLYWAYUSER_PASS ;
            va-abd-rrd/deploy/default/db DB_CLIENTUSER_NAME ;
            va-abd-rrd/deploy/default/db DB_CLIENTUSER_PASS ;
            va-abd-rrd/deploy/default/mq MQ_CLIENTUSER_NAME ;
            va-abd-rrd/deploy/default/mq MQ_CLIENTUSER_PASS ;
            va-abd-rrd/deploy/default/redis REDIS_CLIENTUSER_PASS ;

      - name: "Checkout source code"
        uses: actions/checkout@v3

      - name: "Build secrets file"
        run: |
          echo 'TEST_VALUE=${{ steps.vault-secrets.outputs.TEST_VALUE }}' > vault-secrets.txt
          cat vault-secrets.txt

          eval $(echo "$DB_SECRETS" |  jq -r 'to_entries | .[] | "\(.key)=\(.value|@sh)"')
          printenv

          for YAML in helm/kubectl/secrets-*.yaml; do
            envsubst < $YAML
            # envsubst < $YAML | kubectl -n va-abd-rrd-${{ inputs.target_env }} apply -f -
          done
