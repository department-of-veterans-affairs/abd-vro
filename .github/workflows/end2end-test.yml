name: "PR: End-to-end test for v2"

on:
  pull_request:
    branches: [ main, qa, develop ]
    # Limit to certain PR event types since this action doesn't need to run for every commit
    types: [ready_for_review, review_requested]

  # When changes are pushed to special branches
  push:
    # Branch `develop` is handled by continuous-integration.yml, which calls this workflow
    branches: [main, qa]

  # Allow manual triggering
  workflow_dispatch:

  # Trigger when called by another GitHub Action
  workflow_call:

concurrency:
  group: end2end-${{ github.ref }}

env:
  LH_ACCESS_CLIENT_ID: ${{ secrets.LH_ACCESS_CLIENT_ID }}
  LH_PRIVATE_KEY: ${{ secrets.LH_PRIVATE_KEY }}
  SLACK_EXCEPTION_WEBHOOK: "http://mock-slack:9008/slack-messages"
  MAS_API_AUTH_CLIENT_SECRET: ${{ secrets.MAS_API_AUTH_CLIENT_SECRET }}

jobs:
  end2end-test:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout source code"
        uses: actions/checkout@v3

      - name: "Build the images"
        uses: ./.github/actions/build-images
        with:
          access_token: ${{ secrets.ACCESS_TOKEN_GRADLE_BUILD }}

      - name: "Start the containers"
        run: |
          source scripts/setenv.sh
          export COMPOSE_PROFILES="v2,v2-mocks,pdfgen,lh"
          export -p | sed 's/declare -x //'
          ./gradlew :app:dockerComposeUp
        env:
          ENV: "end2end-test"

      - name: "Sleep a few seconds"
        # App container is not immediately ready
        run: sleep 20

      - name: "Wait for VRO to be ready"
        uses: nev7n/wait_for_response@v1
        with:
          url: 'http://localhost:8081/health'
          responseCode: 200
          # Retry every 2 seconds
          interval: 2000
          # Quite after 30 seconds
          timeout: 30000

      - name: "Run the end-to-end tests"
        run: ./gradlew :app:end2EndTest --info
        env:
          ENV: "end2end-test"

      - name: "Check for tracking files"
        run: |
          TRACKING_FOLDER="/persist/tracking/mas-claim-submitted/$(date '+%Y-%m-%d')"
          echo "::group::Examining app's tracking files in $TRACKING_FOLDER"
          TRACKING_FILES=$(docker exec vro_app_1 ls "$TRACKING_FOLDER")
          echo "$TRACKING_FILES"
          for COLLECTION_ID in 365 375 376 377 381 386 400; do
            echo "Checking for $COLLECTION_ID.json"
            echo "$TRACKING_FILES" | grep "$COLLECTION_ID.json"
          done
          echo "::endgroup::"

      - name: "Clean docker container and images"
        run: ./gradlew dockerclean

      - name: "Clean docker volumes"
        run: ./gradlew dockermaintainerclean
