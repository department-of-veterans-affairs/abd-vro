name: Snyk scan

on:
  pull_request:
    branches: [main, develop]
    # Limit to certain PR event types since this action doesn't need to run for every commit
    types: [ready_for_review, review_requested]

  # When changes are pushed to special branches
  push:
    branches: [main, develop]

  # Allow manual triggering
  workflow_dispatch:

env:
  GITHUB_ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - uses: snyk/actions/setup@master

      - name: "Set up VRO build env"
        uses: ./.github/actions/setup-vro

# https://support.snyk.io/hc/en-us/articles/360015552617-Which-projects-must-be-built-before-testing-with-CLI-
# says Gradle projects don't need to be explicitly built
#      - name: "Build Java code"
#        run: ./gradlew build

# Each of our 24 projects counts towards the "Private manifest" limit (401/month)
# https://docs.snyk.io/products/snyk-open-source/use-snyk-open-source-from-the-cli#snyk-open-source-file-types
#      - name: "Snyk test"
#        run: snyk test --all-projects --sarif-file-output=snyk.sarif --severity-threshold=medium
#        continue-on-error: true # To make sure that SARIF upload gets called
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: "Build Docker images"
        run: ./gradlew docker -PGITHUB_ACCESS_TOKEN=${{ env.GITHUB_ACCESS_TOKEN }}

# These image scans don't count towards Snyk's limit
      - name: "Snyk scan images"
        run: |
          FAILED_IMAGES=""

          function snyk-image(){
            snyk container test va/abd_vro-$1:latest --file=./${2:-$1}/src/docker/Dockerfile \
              --severity-threshold=medium --sarif-file-output=snyk-$1.sarif \
              || FAILED_IMAGES="$FAILED_IMAGES $1"
          }
          snyk-image app
          snyk-image postgres
          snyk-image db-init

          snyk-image service-data-access

          snyk-image pdfgenerator service-python/pdfgenerator
          snyk-image assessclaimdc7101 service-python/assessclaimdc7101
          snyk-image assessclaimdc6602 service-python/assessclaimdc6602
          snyk-image assessclaimdc6510 service-python/assessclaimdc6510

          if [ "$FAILED_IMAGES" ]; then
            echo "Failed images:$FAILED_IMAGES"
            exit 9
          else
            echo "No failed images"
          fi
        continue-on-error: true # To make sure that SARIF upload gets called after this step
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

#      - name: "Upload to GitHub Code Scanning: app"
#        uses: github/codeql-action/upload-sarif@v2
#        with:
#          sarif_file: snyk-app.sarif
#          category: snyk-image-app
#      - name: "Upload to GitHub Code Scanning: postgres"
#        uses: github/codeql-action/upload-sarif@v2
#        with:
#          sarif_file: snyk-postgres.sarif
#          category: snyk-image-postgres
#      - name: "Upload to GitHub Code Scanning: db-init"
#        uses: github/codeql-action/upload-sarif@v2
#        with:
#          sarif_file: snyk-db-init.sarif
#          category: snyk-image-db-init
#      - name: "Upload to GitHub Code Scanning: service-data-access"
#        uses: github/codeql-action/upload-sarif@v2
#        with:
#          sarif_file: snyk-service-data-access.sarif
#          category: snyk-image-service-data-access
#      - name: "Upload to GitHub Code Scanning: pdfgenerator"
#        uses: github/codeql-action/upload-sarif@v2
#        with:
#          sarif_file: snyk-pdfgenerator.sarif
#          category: snyk-image-pdfgenerator
#      - name: "Upload to GitHub Code Scanning: assessclaimdc7101"
#        uses: github/codeql-action/upload-sarif@v2
#        with:
#          sarif_file: snyk-assessclaimdc7101.sarif
#          category: snyk-image-assessclaimdc7101
#      - name: "Upload to GitHub Code Scanning: assessclaimdc6602"
#        uses: github/codeql-action/upload-sarif@v2
#        with:
#          sarif_file: snyk-assessclaimdc6602.sarif
#          category: snyk-image-assessclaimdc6602
