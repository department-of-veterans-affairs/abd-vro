name: "2. (Internal) Update CC Deployment"

on:
  workflow_dispatch:
    inputs:
      target_env:
        description: 'Target LHDI environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - qa
        - sandbox
        - prod-test
        - prod

      image_tag:
        description: 'First 7 of the commit hash, "latest", or "release-1.2.3"'
        required: true
        default: 'latest'
        type: string

      domain-cc:
        description: 'Enable & update CC Application'
        required: true
        type: boolean
        default: true

      # Other deployment options
      rollback:
        description: 'If deploy fails, rollback to previous? (Always true for prod)'
        required: true
        type: boolean
        default: false

  # Allow other workflows to call this one
  workflow_call:
    inputs:
      target_env:
        required: true
        type: string
      image_tag:
        required: true
        type: string

      domain-cc:
        required: false
        type: boolean
        default: true

      rollback:
        required: false
        type: boolean
        default: false

env:
  # Id for the #benefits-vro-devops Slack channel
  SLACK_CHANNEL: C04CA47HV96
  RELEASE_NAME: vro

jobs:
  update-cc-deployment:
    # Required secrets are set in the specific repo
    if: github.repository == 'department-of-veterans-affairs/abd-vro-internal'
    runs-on: ubuntu-latest
    steps:
      - name: "Slack: workflow triggered"
        id: notify-slack
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-text: ":rocket: \
            <${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}|\
            Updating CC deployment (#${{ github.run_number }})> \
            in *${{ inputs.target_env }}* with images tagged `${{ inputs.image_tag }}`...\n\
            (caused by `${{github.event_name}}` triggered by `${{github.triggering_actor}}`)\n"

      - name: "Set up kube config"
        id: kube-setup
        run: |
          mkdir ~/.kube
          case "${{ inputs.target_env }}" in
            dev|qa|sandbox) KUBE_CONFIG="${{ secrets.DEV_KUBE_CONFIG }}";;
            prod-test|prod) KUBE_CONFIG="${{ secrets.PROD_KUBE_CONFIG }}";;
          esac
          echo -n "${KUBE_CONFIG}" | base64 -d > ~/.kube/config
          chmod go-rwx ~/.kube/config

          echo "==================================="
          if helm list -n va-abd-rrd-${{ inputs.target_env }} | grep "^${{ env.RELEASE_NAME }} "; then
            helm get values ${{ env.RELEASE_NAME }} -n va-abd-rrd-${{ inputs.target_env }}
            kubectl -n va-abd-rrd-${{ inputs.target_env }} get pods --show-labels

            echo '## Before update' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            helm get values ${{ env.RELEASE_NAME }} -n va-abd-rrd-${{ inputs.target_env }} >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY

            HELM_VALUES=$(helm get values ${{ env.RELEASE_NAME }} --all -n va-abd-rrd-${{ inputs.target_env }} -o json)
            echo "helm_values=$HELM_VALUES" >> $GITHUB_OUTPUT
            # Show values with an `enabled` key
            # echo $HELM_VALUES | jq '. | with_entries(select(.value.enabled!=null))'
          else
            echo "No existing Helm release; creating a new Helm release: ${{ env.RELEASE_NAME }}"
            # Set helm_values so that subsequent steps that access it don't fail
            echo 'helm_values={ "postgres": { "enabled": false } }' >> $GITHUB_OUTPUT
          fi

      - name: "Checkout source code"
        uses: actions/checkout@v3

      - name: "Slack thread: Post deploying message"
        # Post in thread to reduce clutter in Slack
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-optional-thread_ts: ${{ fromJson(steps.notify-slack.outputs.slack-result).response.message.ts }}
          slack-text: ":panda_angel: Deploying:\n\
            - domain-cc: *${{ inputs.domain-cc }}*\n\
            Rollback if deployment fails: ${{ inputs.rollback }}"
      - name: "Deploy '${{ inputs.image_tag }}' to ${{ inputs.target_env }} env"
        run: |
          HELM_ARGS=""

          VALUES_FILE="helm/values-for-${{ inputs.target_env }}.yaml"
          if [ -e "${VALUES_FILE}" ]; then
            HELM_ARGS="$HELM_ARGS -f $VALUES_FILE"
          fi

          if [ "${{ inputs.rollback }}" == "true" ] || [ "${{ inputs.target_env }}" == "prod" ]; then
            HELM_ARGS="$HELM_ARGS --atomic"
          fi

          echo "HELM_ARGS: $HELM_ARGS"
          echo "::group::Upgrading Helm release: ${{ env.RELEASE_NAME }}"
          set -x
          # Use arg --reuse-values to reuse settings for VRO's container
          helm upgrade ${{ env.RELEASE_NAME }} helm/ -n va-abd-rrd-${{ inputs.target_env }} \
            --install --reuse-values --wait --timeout 10m \
            ${HELM_ARGS} \
            --set-string domain-cc-chart.imageTag=${{ inputs.image_tag }} \
            --set domain-cc.enabled=${{ inputs.domain-cc }}
          echo "::endgroup::"

          echo "==================================="
          helm get values ${{ env.RELEASE_NAME }} -n va-abd-rrd-${{ inputs.target_env }}
          kubectl -n va-abd-rrd-${{ inputs.target_env }} get pods --show-labels
          # https://kubernetes.io/docs/reference/kubectl/jsonpath/
          kubectl -n va-abd-rrd-${{ inputs.target_env }} get pods -o jsonpath='{range .items[*]}
            {"pod: "}{.metadata.name}{range .spec.containers[*]}
            {"\tname: "}{.name}
            {"\timage: "}{.image}{end}'
          kubectl -n va-abd-rrd-${{ inputs.target_env }} get pvc
          kubectl -n va-abd-rrd-${{ inputs.target_env }} get services
          kubectl -n va-abd-rrd-${{ inputs.target_env }} get events

          echo '## After update' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          helm get values ${{ env.RELEASE_NAME }} -n va-abd-rrd-${{ inputs.target_env }} >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: "Slack thread: Post failed status message"
        if: failure()
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-optional-thread_ts: ${{ fromJson(steps.notify-slack.outputs.slack-result).response.message.ts }}
          slack-text: ":panda_cry: Failed CC deployment to *${{ inputs.target_env }}*"
      - name: "Slack emoji: React failure on top-level Slack notification"
        if: failure()
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-function: send-reaction
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-message-timestamp: ${{ fromJson(steps.notify-slack.outputs.slack-result).response.message.ts }}
          slack-emoji-name: 'x'

      - name: "Slack thread: Post success status message"
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-optional-thread_ts: ${{ fromJson(steps.notify-slack.outputs.slack-result).response.message.ts }}
          slack-text: ":panda_duck_yay: Completed CC deployment to ${{ inputs.target_env }}"
      - name: "Slack emoji: React success on top-level Slack notification"
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-function: send-reaction
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-message-timestamp: ${{ fromJson(steps.notify-slack.outputs.slack-result).response.message.ts }}
          slack-emoji-name: 'tada'
