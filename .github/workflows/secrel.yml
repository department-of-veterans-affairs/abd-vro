name: "2. (Internal) SecRel workflow"
run-name: "SecRel ${{inputs.image_prefix}} (${{github.ref_name}}) ${{github.event.head_commit.message}}"

on:
  # Trigger on every code push to main and develop branches
  push:
    branches: [ main, qa, develop, domain-* ]

  # Trigger on all published GitHub Releases
  release:
    types: [ "created" ]

  pull_request:
    branches: [ develop ]

  # Allow manual runs
  workflow_dispatch:
    inputs:
      image_prefix:
        description: 'Image prefix for the chosen branch. Choose `(no prefix)` to create non-dev images for deployment to sandbox, prod-test, and prod.'
        required: true
        default: 'dev_'
        type: choice
        options:
          - "dev_"
          - "(no prefix)"
      run_tests:
        description: "Run Gradle tests?"
        required: true
        type: boolean
        default: true
      run_secrel:
        description: "Run SecRel and sign images?"
        required: true
        type: boolean
        default: true
      publish_mode:
        description: "Which images to publish"
        required: true
        type: choice
        options:
          - "only_changed"
          - "all"
          - "pinned_only"

env:
  # Id for the #benefits-vro-devops Slack channel
  SLACK_CHANNEL: C04CA47HV96
  HEAD_COMMIT_MSG: "${{ github.event.head_commit.message }}"

jobs:
  gate-check:
    # only run for the internal repo, where the images are published
    if: github.repository == 'department-of-veterans-affairs/abd-vro-internal'
    outputs:
      continue: ${{ steps.check-state.outputs.continue }}
    runs-on: ubuntu-latest
    steps:
      - name: "Check trigger event"
        id: check-state
        run: |
          # Gate Check

          # Use triggering_actor instead of actor to allow manually re-running this workflow as another user
          if [ "${{github.triggering_actor}}" == "abd-vro-machine" ]; then
            if echo "$HEAD_COMMIT_MSG" | grep '^Automated commit: Pin versions'; then
              CONTINUE=false
              echo "Skipping this workflow b/c it was triggered by a commit that pins image versions \
          immediately after a release. Otherwise, the workflow will fail.
          Until the release images are published to GHCR (so that they're available for comparison), \
          the 'Publish to GHCR' step of this workflow will fail." | tee -a "$GITHUB_STEP_SUMMARY"

            elif echo "$HEAD_COMMIT_MSG" | grep '^Automated commit:'; then
              CONTINUE=false
              echo "Skipping this workflow b/c it was triggered by an automated commit that \
          doesn't change container images." | tee -a "$GITHUB_STEP_SUMMARY"
            fi
          fi

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            if echo "$GITHUB_HEAD_REF" | grep '^dependabot/'; then
              CONTINUE=true
              echo "Running SecRel against a Dependabot PR" | tee -a "$GITHUB_STEP_SUMMARY"
            else
              CONTINUE=false
              echo "For PRs, SecRel runs against only Dependabot PR" | tee -a "$GITHUB_STEP_SUMMARY"
            fi
          fi

          echo "continue=${CONTINUE:-true}" >> "$GITHUB_OUTPUT"

  publish-to-ghcr:
    name: Publish to GHCR
    needs: gate-check
    if: needs.gate-check.outputs.continue == 'true'
    outputs:
      vro-images: ${{ steps.publish-images.outputs.images_list }}
      slack-response-ts: ${{ fromJson(steps.notify-slack.outputs.slack-result).response.message.ts }}
      run-secrel: ${{ steps.image-props.outputs.run_secrel }}
    runs-on: ubuntu-latest
    steps:
      - name: "Determine image prefix and tag"
        id: image-props
        run: |
          # Set defaults
          IMG_TAG=${GITHUB_SHA:0:7}
          IMG_PREFIX="dev_"
          RUN_GRADLE_TESTS="true"
          PUBLISH_MODE="all"
          RUN_SECREL="true"

          # Override some defaults depending on the branch/ref_name
          echo "ref_name: ${{ github.ref_name }}"
          case "${{ github.ref_name }}" in
            main)      IMG_PREFIX=""
                       PUBLISH_MODE="all"
                       ;;
            release-*|v*.*.*) # if git tag reflects a release, then publish non-dev images
                       IMG_PREFIX=""
                       # For release events, all images are pinned so use the pinned version
                       PUBLISH_MODE="pinned_only"
                       ;;
            develop)   # To reduce workflow runtime, don't run tests
                       RUN_GRADLE_TESTS=false
                       # To reduce SecRel scans, only published changed images
                       PUBLISH_MODE="only_changed"
                       ;;
          esac

          # If workflow was manually dispatched, override settings
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            [ "${{ inputs.image_prefix }}" == "(no prefix)" ] && IMG_PREFIX=""
            RUN_GRADLE_TESTS=${{ inputs.run_tests }}
            RUN_SECREL=${{ inputs.run_secrel }}
            PUBLISH_MODE=${{ inputs.publish_mode }}
          fi

          {
            echo "image_tag=${IMG_TAG}"
            echo "image_prefix=${IMG_PREFIX}"
            echo "run_tests=${RUN_GRADLE_TESTS}"
            echo "run_secrel=${RUN_SECREL}"
            echo "publish_mode=${PUBLISH_MODE}"
          } >> "$GITHUB_OUTPUT"

      - name: "DEBUG"
        run: |
          echo "image_prefix: ${{ steps.image-props.outputs.image_prefix }}"
          echo "image_tag: ${{ steps.image-props.outputs.image_tag }}"
          echo "run_tests: ${{ steps.image-props.outputs.run_tests }}"
          echo "publish_mode: ${{ steps.image-props.outputs.publish_mode }}"

      - name: "Checkout source code"
        uses: actions/checkout@v3
        with:
          # Checkout using a PAT so that we can do `git push` later in publish-images
          token: ${{ secrets.ACCESS_TOKEN_PUSH_TO_DEVELOP }}

      - name: "Slack: workflow triggered"
        id: notify-slack
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-text: ":arrow_forward: \
            <${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}|\
            SecRel running (#${{ github.run_number }})>: \
            Publishing images with prefix `${{ steps.image-props.outputs.image_prefix }}` \
            and tag `${{ steps.image-props.outputs.image_tag }}` \
            from ${{github.ref_type}} `${{github.ref_name}}`, \
            caused by `${{github.event_name}}` triggered by `${{github.triggering_actor}}` \
            (Run tests? ${{ steps.image-props.outputs.run_tests }})...\n"

      - name: "Publish ${{ steps.image-props.outputs.image_prefix }} images to GHCR"
        id: publish-images
        uses: ./.github/actions/publish-images
        with:
          image_prefix: "${{ steps.image-props.outputs.image_prefix }}"
          image_tag: "${{ steps.image-props.outputs.image_tag }}"
          ghcr_username: ${{ github.actor }}
          ghcr_password: ${{ secrets.GITHUB_TOKEN }}
          run_tests: ${{ steps.image-props.outputs.run_tests }}
          publish_mode: ${{ steps.image-props.outputs.publish_mode }}

      - name: "Slack thread: Images published"
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-optional-thread_ts: ${{ fromJson(steps.notify-slack.outputs.slack-result).response.message.ts }}
          slack-text: ":panda_builder: Images published!"

  debug-job:
    needs: publish-to-ghcr
    runs-on: ubuntu-latest
    steps:
      - name: show vars
        run: |
          echo "ref_name: ${{github.ref_name}}"
          echo "vro-images: ${{ needs.publish-to-ghcr.outputs.vro-images }}"

  secrel:
    name: SecRel Pipeline
    needs: publish-to-ghcr
    if: needs.publish-to-ghcr.outputs.run-secrel == 'true'
    # https://psychic-disco-c1251ea1.pages.github.io/pipeline/release_notes/v4.2.0/
    uses: department-of-veterans-affairs/lighthouse-tornado-secrel-pipeline/.github/workflows/pipeline.yml@v4
    with:
      config-file: .github/secrel/config.yml
      images: ${{ needs.publish-to-ghcr.outputs.vro-images }}
    secrets: inherit

  notify-secrel-error:
    needs: secrel
    if: always() && needs.secrel.result == 'failure'
    runs-on: ubuntu-latest
    steps:
      - name: "Slack: SecRel Failure"
        uses: archive/github-actions-slack@v2.6.0
        # only run for the internal repo
        if: ${{ github.repository == 'department-of-veterans-affairs/abd-vro-internal' }}
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-text: ":redlight: <${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}|\
              SecRel scan (#${{ github.run_number }}) failed>! \n\
              ${{github.ref_type}} `${{github.ref_name}}` (`${{github.sha}}`), \n\
              caused by `${{github.event_name}}` triggered by `${{github.triggering_actor}}` ..."

  slack-final:
    needs: [ gate-check, publish-to-ghcr, secrel]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: "Set status message"
        run: |
          URL=${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}
          {
            if [ "${{needs.publish-to-ghcr.result}}" == 'failure' ]; then
              echo "WORKFLOW_STATE_TEXT=:panda_blank: <$URL|Publishing> failed!"
              echo 'WORKFLOW_STATE_EMOJI=x'
            elif [ "${{needs.secrel.result}}" == 'failure' ]; then
              echo "WORKFLOW_STATE_TEXT=:panda_cop: <$URL|SecRel> failed!"
              echo 'WORKFLOW_STATE_EMOJI=x'
            elif [ "${{needs.secrel.result}}" == 'success' ]; then
              echo "WORKFLOW_STATE_TEXT=:panda-yay: SecRel passed and images signed!"
              echo 'WORKFLOW_STATE_EMOJI=panda-yay'
            elif [ "${{needs.publish-to-ghcr.result}}" == 'skipped' ]; then
              echo "WORKFLOW_STATE_TEXT=:black_square_for_stop: <$URL|Publishing> skipped"
              echo 'WORKFLOW_STATE_EMOJI=black_square_for_stop'
            elif [ "${{needs.publish-to-ghcr.outputs.run-secrel}}" == "true" ] && [ "${{needs.secrel.result}}" != 'success' ]; then
              echo "WORKFLOW_STATE_TEXT=:black_square_for_stop: <$URL|SecRel> ${{needs.secrel.result}}"
              echo 'WORKFLOW_STATE_EMOJI=black_square_for_stop'
            elif [ "${{needs.publish-to-ghcr.outputs.run-secrel}}" == "false" ] && [ "${{needs.publish-to-ghcr.result}}" == 'success' ]; then
              echo "WORKFLOW_STATE_TEXT=:heavy_check_mark: Run completed (without SecRel scans or signing images)"
              echo 'WORKFLOW_STATE_EMOJI=heavy_check_mark'
            else
              echo "WORKFLOW_STATE_TEXT=publish: ${{needs.publish-to-ghcr.result}}; secrel: ${{needs.secrel.result}}"
              echo 'WORKFLOW_STATE_EMOJI=shrug'
            fi
          } >> "$GITHUB_ENV"

      - name: "Slack thread: Post final status"
        if: always() && needs.gate-check.outputs.continue == 'true'
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-optional-thread_ts: ${{ needs.publish-to-ghcr.outputs.slack-response-ts }}
          slack-text: ${{ env.WORKFLOW_STATE_TEXT }}
      - name: "Slack emoji: React success on top-level Slack notification"
        if: always() && needs.gate-check.outputs.continue == 'true'
        uses: archive/github-actions-slack@v2.6.0
        with:
          slack-function: send-reaction
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-message-timestamp: ${{ needs.publish-to-ghcr.outputs.slack-response-ts }}
          slack-emoji-name: ${{ env.WORKFLOW_STATE_EMOJI }}
