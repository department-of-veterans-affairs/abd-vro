name: "2. (Internal) SecRel workflow"
run-name: "SecRel (${{github.ref_name}}) ${{github.event.head_commit.message}}"

on:
  # Trigger on every code push to main and develop branches
  push:
    branches: [ main, qa, develop, domain-* ]

  # Run on a schedule, at 1100 UTC/0700 EST every weekday MON-FRI
  # Per the documentation: Scheduled workflows will only run on the default (develop) branch
  schedule:
    - cron: "0 11 * * 1-5"

  # Run SecRel on Dependabot PRs, automatically
  pull_request:
    branches: [ develop ]

  # Allow manual runs
  workflow_dispatch:
    inputs:
      run_tests:
        description: "Run Gradle tests?"
        required: true
        type: boolean
        default: true
      run_secrel:
        description: "Run SecRel and sign images?"
        required: true
        type: boolean
        default: true
      publish_images:
        description: "Publish all images from the head of the selected branch?"
        required: true
        type: boolean
        default: false
      image_name:
        description: "Which images do you want to run SecRel on? This does not affect image publishing."
        required: true
        type: choice
        default: all
        options:
          - all
          - cc-app
          - xample-workflows
          - svc-bgs-api
          - svc-bie-kafka
          - svc-bip-api
          - ee-max-cfi-app
          - ee-ep-merge-app
          - dev-tools
          - db-init
          - app
          - rabbitmq
      image_tag:
        description: "Image tag to run SecRel on. If 'all' is selected, then 'latest' will always be used. This does not define the image tag during publishing"
        required: true
        type: string
        default: latest

env:
  # Id for the #benefits-vro-devops Slack channel
  SLACK_CHANNEL: C04CA47HV96
  HEAD_COMMIT_MSG: "${{ github.event.head_commit.message }}"

jobs:
  gate-check:
    # only run for the internal repo, where the images are published
    if: github.repository == 'department-of-veterans-affairs/abd-vro-internal'
    outputs:
      run-secrel: ${{ steps.check-run-conds.outputs.run_secrel }}
      publish-images: ${{ steps.check-run-conds.outputs.publish_images }}
    runs-on: ubuntu-latest
    steps:
      - name: "Decide downstream actions"
        id: check-run-conds
        run: |
          # Gate Check
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            if echo "$GITHUB_HEAD_REF" | grep '^dependabot/'; then
              RUN_SECREL=true
              PUBLISH_IMAGES=true
              echo "Running SecRel against a Dependabot PR" | tee -a "$GITHUB_STEP_SUMMARY"
            else
              RUN_SECREL=false
              echo "For PRs, SecRel runs against only Dependabot PR" | tee -a "$GITHUB_STEP_SUMMARY"
            fi
          elif [ "${{ github.event_name }}" == "push" ]; then
              PUBLISH_IMAGES=true
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            RUN_SECREL=${{ inputs.run_secrel }}
            PUBLISH_IMAGES=${{ inputs.publish_images }}
          fi

          {
            echo "run_secrel=${RUN_SECREL:-true}"
            echo "publish_images=${PUBLISH_IMAGES:-false}"
          } >> "$GITHUB_OUTPUT"

  # This step is always expected to output a non-empty list of images published
  publish-to-ghcr:
    name: Publish to GHCR
    needs: gate-check
    if: needs.gate-check.outputs.publish-images == 'true'
    outputs:
      vro-images: ${{ steps.publish-images.outputs.images_list }}
      slack-response-ts: ${{ fromJson(steps.notify-slack.outputs.slack-result).response.message.ts }}
    runs-on: ubuntu-latest
    steps:
      - name: "Determine image tag"
        id: image-props
        run: |
          # Set defaults
          IMG_TAG=${GITHUB_SHA:0:7}
          RUN_GRADLE_TESTS="true"

          # Override some defaults depending on the branch/ref_name
          echo "ref_name: ${{ github.ref_name }}"

          # If workflow was manually dispatched, override settings
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            RUN_GRADLE_TESTS=${{ inputs.run_tests }}
          fi

          {
            echo "image_tag=${IMG_TAG}"
            echo "run_tests=${RUN_GRADLE_TESTS}"
          } >> "$GITHUB_OUTPUT"

      - name: "DEBUG"
        run: |
          echo "image_tag: ${{ steps.image-props.outputs.image_tag }}"
          echo "run_tests: ${{ steps.image-props.outputs.run_tests }}"

      - name: "Checkout source code"
        uses: actions/checkout@v4
        with:
          # Checkout using a PAT so that we can do `git push` later in publish-images
          token: ${{ secrets.ACCESS_TOKEN_PUSH_TO_DEVELOP }}

      - name: "Slack: workflow triggered"
        id: notify-slack
        uses: archive/github-actions-slack@v2.9.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-text: ":arrow_forward: \
            <${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}|\
            SecRel running (#${{ github.run_number }})>: \
            Publishing images with tag `${{ steps.image-props.outputs.image_tag }}` \
            from ${{github.ref_type}} `${{github.ref_name}}`, \
            caused by `${{github.event_name}}` triggered by `${{github.triggering_actor}}` \
            (Run tests? ${{ steps.image-props.outputs.run_tests }})...\n"

      - name: "Publish images to GHCR"
        id: publish-images
        uses: ./.github/actions/publish-images
        with:
          image_tag: "${{ steps.image-props.outputs.image_tag }}"
          ghcr_username: ${{ github.actor }}
          ghcr_password: ${{ secrets.GITHUB_TOKEN }}
          run_tests: ${{ steps.image-props.outputs.run_tests }}

      - name: "Slack thread: Images published"
        uses: archive/github-actions-slack@v2.9.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-optional-thread_ts: ${{ fromJson(steps.notify-slack.outputs.slack-result).response.message.ts }}
          slack-text: ":panda_builder: Images published!"

  secrel-inputs:
    if: ${{ !failure() }}
    needs: [publish-to-ghcr, gate-check]
    outputs:
      vro-images: ${{ steps.vro-images.outputs.image_list }}
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout source code"
        uses: actions/checkout@v4
        with:
          # Checkout using a PAT so that we can do `git push` later in publish-images
          token: ${{ secrets.ACCESS_TOKEN_PUSH_TO_DEVELOP }}
      - name: "Determine VRO image inputs"
        id: vro-images
        env:
          IMAGE_ARR: ${{needs.publish-to-ghcr.outputs.vro-images}}
        run: |
          source scripts/image_vars.src
          IMAGE_LIST="[]"

          # This case captures manual dispatches where publishing is disabled
          if [ "${{ needs.publish-to-ghcr.result }}" == 'skipped' ]; then

            IMAGE_LIST="["

            if [ "${{inputs.image_name}}" == 'all' ]; then
              for PREFIX in "${VAR_PREFIXES_ARR[@]}"; do
                # postgres container is only used locally
                if [ "${PREFIX}" != 'postgres' ]; then
                  IMG_NAME="$(getVarValue "${PREFIX}" _IMG)"
                  GHCR_PATH="ghcr.io/${{github.repository}}/${IMG_NAME}"
                  IMAGE_LIST+="\"${GHCR_PATH}:latest\","
                fi
              done

              # Remove the trailing comma
              IMAGE_LIST=${IMAGE_LIST%?}
            else
              IMG_TAG="${{inputs.image_tag}}"
              IMG_NAME="$(getVarValue "$(bashVarPrefix "${{inputs.image_name}}")" _IMG)"
              GHCR_PATH="ghcr.io/${{github.repository}}/${IMG_NAME}"
              IMAGE_LIST+="\"${GHCR_PATH}:${IMG_TAG}\""
            fi

            IMAGE_LIST+="]"

            echo "image_list=${IMAGE_LIST}" >> "$GITHUB_OUTPUT"

          # This case captures when the workflow is run automatically on PR merge along
          # with manual dispatches where publishing is enabled
          elif [ "${{needs.publish-to-ghcr.result}}" == 'success' ]; then
            echo "image_list=$IMAGE_ARR" >> "$GITHUB_OUTPUT"
          fi


  secrel:
    name: SecRel Pipeline
    needs: [secrel-inputs, gate-check]
    if: ${{always() && needs.gate-check.outputs.run-secrel == 'true'}}
    secrets: inherit
    uses: department-of-veterans-affairs/lighthouse-tornado-secrel-pipeline/.github/workflows/pipeline.yml@v5
    with:
      config-file: .github/secrel/config.yml
      images: ${{ needs.secrel-inputs.outputs.vro-images }}
