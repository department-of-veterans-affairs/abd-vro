/**
 * Provides docker container settings
 * Based on https://github.com/department-of-veterans-affairs/lighthouse-di-starter-boot/blob/main/buildSrc/src/main/groovy/starter.java.container-conventions.gradle
 */

plugins {
    id 'base'
    id 'java'
    id 'com.palantir.docker'
    id 'com.palantir.docker-run'
}

ext {
    dockerRegistry = project.hasProperty("dockerRegistry") ? "${project.dockerRegistry}" : "${group}"
    dockerImageVersion = project.hasProperty("buildNumber") ? "${project.version}-${project.buildNumber}" : project.version

    findDockerfile = { pathStrings ->
        for(String pathString : pathStrings){
            def projectFile = file(pathString);
            if (projectFile.exists()) return projectFile

            def resource = getClass().getResource(pathString)
            if (resource==null) continue

            def resourceFile = project.resources.text.fromUri(resource.toURI()).asFile()
            return resourceFile
        }
    }

    copyFromResources = { copySpec, resourcePaths ->
        def resourceToFilenameMap = [:]
        // Set up rename closure: If it's in the map, then return the desired filename;
        // otherwise if closure returns null, file will not be renamed.
        copySpec.rename({ resourceToFilenameMap[it] })

        resourcePaths.forEach({
            def source = project.resources.text.fromUri(getClass().getResource(it).toURI()).asFile()
            // Copy the source into the Docker build context
            copySpec.from(source)
            // source.name is a randomly generated name, so save the mapping so it can be renamed to the original filename
            resourceToFilenameMap[source.name] = new File(it).name
        })
    }
}

docker {
    dependsOn(assemble)
    name "${dockerRegistry}/${rootProject.name}-${project.name}"
    tag "Build", "${dockerRegistry}/${rootProject.name}-${project.name}:${dockerImageVersion}"
    tag "Latest", "${dockerRegistry}/${rootProject.name}-${project.name}:latest"
    noCache false // Use image caches; only recreate if different

    // Specify files to copy into Docker build context
    files "src/docker/entrypoint.sh"
    copyFromResources(copySpec, [
        '/docker/set-env-secrets.src',
        '/docker/entrypoint-wrapper.sh'
    ])
}

dockerRun {
    name project.name
    image "${dockerRegistry}/${rootProject.name}-${project.name}"
}

tasks.register('dockerStart', DefaultTask) {
    group = "Docker Run"
    description = "Remove unused containers, build image, run container"
    dependsOn tasks.named("dockerRemove")
    dependsOn tasks.named("docker")
    dependsOn tasks.named("dockerRun")
}

tasks.register('dockerRemove', DefaultTask) {
    group = "Docker"
    description = "Stop container, then remove unused containers and images"
    mustRunAfter tasks.named('dockerStop')
    mustRunAfter tasks.named('dockerRemoveContainer')
}

tasks.named("dockerRemoveContainer").configure {
    mustRunAfter tasks.named('dockerStop')
}

tasks.named("dockerRun").configure {
    dependsOn tasks.named("docker")
}

def lintDockerfile = tasks.register('lintDockerfile', DefaultTask) {
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Use linter (default hadolint) to perform static analysis on Dockerfile"
    ext.binary = "hadolint"
    ext.targets = [ "Dockerfile", "src/docker/Dockerfile" ]
    ext.taskTimeout = 10000L
    def result = 0
    def sout = new StringBuilder()
    def serr = new StringBuilder()
    doLast {
        ext.targets.each { f ->
            if (file(f).exists()) {
                def cmdLine = "${ext.binary} ${f}"
                def proc = cmdLine.execute(null, project.projectDir)
                proc.consumeProcessOutput(sout, serr)
                proc.waitForOrKill(ext.taskTimeout)
                result |= proc.exitValue()
            }
        }
        if (result != 0 && serr) {
            ant.fail(serr) }
        else if (result != 0) {
            ant.fail(sout)
        }
        return result
    }
}

tasks.named("check").configure {
    dependsOn lintDockerfile
}
