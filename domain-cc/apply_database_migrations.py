"""
Script for programmatically detecting changes to the database schema and
creating them in the VRO flywheel migrations folder, so that the db-init
service can properly CRUD postgres tables
"""

import os
import subprocess
import sys
from alembic import command
from alembic.config import Config
from alembic.util.exc import AutogenerateDiffsDetected



def are_database_changes():
    cmd = ['alembic', 'check']  # Command to execute
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE)  # Execute the command
    output, error = process.communicate()
    return 'New upgrade operations detected' in output.decode('utf-8')

# def generate_new_migration():
#     cmd = ['alembic', 'revision', '--autogenerate', '-m', '<automated migration message>']
#     process = subprocess.Popen(cmd, stdout=subprocess.PIPE)  # Execute the command
#     output, error = process.communicate()
#     print('output:')
#     print(output.decode('utf-8'))
#
#     print('========================')
#
#     print('error:')
#     print(error)

def generate_new_migration(alembic_cfg):
    revision_script = command.revision(alembic_cfg, autogenerate=True, message='automated migration message')
    return revision_script.path


def generate_flyway_migration(new_migration_path):
    cmd = ['alembic', 'check']  # Command to execute
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE)  # Execute the command
    output, error = process.communicate()


def main():
    # check if there are any changes to apply
    os.chdir('cc-app')
    alembic_cfg = Config("./alembic.ini")
    try:
        command.check(alembic_cfg)
    except AutogenerateDiffsDetected:
        print('handling')
        new_migration_path = generate_new_migration(alembic_cfg)
        generate_flyway_migration(new_migration_path)
    else:
        print('no new changes to apply')
    # print('have changes to apply')
    # generate_new_migration()
    #
    # print('exiting anyway')
    # sys.exit(100)
    #
    # # try to run alembic revision --autogenerate -m "<message describing change>"
    # # if migrations to apply, run alembic upgrade head
    # # alembic upgrade < revision - hash > --sql > new_sql_file.sql
    # # generate a migration version # compatible w/ flywheel
    # # mv the new_sql_file.sql to the flywheel migrations folder
    # # restart postgres-service, or re-run db-init


if __name__ == '__main__':
    main()
