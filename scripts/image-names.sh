#!/bin/bash

# This is a quick and dirty script to generate image_vars.src that is compatible with Bash 3.
# This script can be replaced with for example a Gradle task later.

# TODO: we should be more consistent about naming our images. This script will
#       help us migrate to get consistency

gradle_folder() {
  case $1 in
    pdfgenerator|assessclaim*) echo "./service-python/$1";;
    *) echo "./$1";;
  esac
}

gradle_image_name() {
  case $1 in
    *) echo "va/abd_vro-$1";;
  esac
}

nonprod_image_name() {
  VROENV=${2:-dev}
  case $1 in
    rabbitmq)  echo "vro-$1";;
    pdfgenerator|assessclaim*) echo "${VROENV}_vro-service-$1";;
    app|postgres|db-init|*) echo "${VROENV}_vro-$1";;
  esac
}

helm_image_key() {
  case $1 in
    redis) echo "$1";;
    postgres) echo "db";;
    rabbitmq) echo "mq";;
    db-init) echo "dbInit";;
    service-data-access) echo "serviceDataAccess";;
    pdfgenerator) echo "pdfGenerator";;
    assessclaimdc7101) echo "serviceAssessClaimDC7101";;
    assessclaimdc6602) echo "serviceAssessClaimDC6602";;
    app|*) echo "$1";;
  esac
}

bash_var_prefix() {
  helm_image_key "$@"
}

secrel_image_name() {
  case $1 in
    pdfgenerator|assessclaim*) echo "vro-service-$1";;
    *) echo "vro-$1";;
  esac
}

secrel_dockerfile() {
  case $1 in
    pdfgenerator) echo "`gradle_folder $1`/src/docker/Dockerfile";;
    *) echo "`gradle_folder $1`/src/docker/Dockerfile";;
  esac
}

secrel_docker_context() {
  case $1 in
    pdfgenerator|assessclaim*) echo "./service-python/$1/src";;
    app|*) echo "./$1/src/main/resources";;
  esac
}

some_name() {
  case $1 in
    *) echo "$1_${FUNCNAME[0]}";;
  esac
}

OTHER_IMAGS=(redis rabbitmq)
IMAGES=( app postgres db-init service-data-access pdfgenerator assessclaimdc7101 assessclaimdc6602)
echo "count: ${IMAGES[#]}"

for INDEX in ${!IMAGES[@]}; do
  echo "[$INDEX] : ${IMAGES[$INDEX]}"
done

echo "=== Verifying folders and files"
for IMG in ${IMAGES[@]}; do
  echo "--- $IMG"
  echo "`gradle_image_name $IMG`"
  echo "`nonprod_image_name $IMG`"
  ls `gradle_folder $IMG`/build.gradle
  echo "- name: `secrel_image_name $IMG`"
  echo `secrel_docker_context $IMG`
  ls `secrel_dockerfile $IMG`
  echo "- helm: `helm_image_key $IMG`"
  echo
done

SRC_FILE=scripts/image_vars.src
{
  echo "# This file is autogenerated -- update $0 instead."
  echo '# Usage: source "'$SRC_FILE'"'
  echo '# These variables are used in GitHub Actions and deploy scripts.'
  echo
  echo "VRO_IMAGES=( ${IMAGES[@]} )"
  echo '# Usage: for IMG in ${VRO_IMAGES[@]}; do ...; done'
  echo
  for IMG in ${IMAGES[@]}; do
    echo "# --- $IMG in folder `gradle_folder $IMG`"
    PREFIX=`bash_var_prefix $IMG`
    echo "${PREFIX}_GRADLE_IMG=\"`gradle_image_name $IMG`\""

    echo "${PREFIX}_DEV_IMG=\"`nonprod_image_name $IMG dev`\""
    echo "${PREFIX}_QA_IMG=\"`nonprod_image_name $IMG qa`\""

    echo "${PREFIX}_SECREL_IMG=\"`secrel_image_name $IMG`\""
    echo "${PREFIX}_SECREL_CONTEXT=\"`secrel_docker_context $IMG`\""
    echo "${PREFIX}_SECREL_DOCKERFILE=\"`secrel_dockerfile $IMG`\""

    echo "${PREFIX}_HELM_KEY=\"`helm_image_key $IMG`\""
    echo
  done
} > "$SRC_FILE"
