import java.text.SimpleDateFormat

plugins {
    id("io.gatling.gradle") version "${gatling_plugin_version}" apply false
    id 'starter.std.java.application-conventions'
    id 'starter.java.config-conventions'
    id 'starter.java.build-utils-conventions'
}

dependencies {
    // constrain gatling and zinc to use updated scala-library without vulnerability
    constraints {
        implementation "org.scala-lang:scala-library:${scala_version}"
        gatling "org.scala-lang:scala-library:${scala_version}"
        gatlingImplementation "org.scala-lang:scala-library:${scala_version}"
        zinc "org.scala-lang:scala-library:${scala_version}"
    }


    implementation project(':domain')
    implementation project(':api')
    implementation project(':controller')
    implementation project(':persistence:model')
    implementation project(':service:provider')
    implementation project(':service:spi')
    implementation project(':service:db')

    implementation 'gov.va.starter:open-api'
    // Provides http://localhost:8081/health endpoint used in app's Dockerfile
    implementation 'gov.va.starter:health'
    // Not sure if these are needed:
    implementation 'gov.va.starter:tracing'
    implementation 'gov.va.starter:error-handling'
    implementation 'gov.va.starter:exceptions'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    implementation "org.springframework.security:spring-security-core:${spring_security_version}"
    implementation "org.springframework.security:spring-security-config:${spring_security_version}"
    implementation "org.springframework.security:spring-security-web:${spring_security_version}"

    // Needed?
    // implementation "org.postgresql:postgresql:${postgresql_version}"
    runtimeOnly "org.postgresql:postgresql:${postgresql_version}"

    testRuntimeOnly "com.h2database:h2:${h2_version}"
    // Needed?
    // testImplementation "org.testcontainers:junit-jupiter:${testcontainers_version}"
    // testImplementation "org.testcontainers:postgresql:${testcontainers_version}"

    // This version is compatible with current spring version: 5.3.8

    testImplementation "org.apache.camel:camel-test-spring-junit5:${camel_version}"

    docker project(':db-init')
}

// Disable tasks associated with Gatling
project.gradle.startParameter.excludedTaskNames.add('compileGatlingJava')
project.gradle.startParameter.excludedTaskNames.add('compileGatlingScala')
project.gradle.startParameter.excludedTaskNames.add('processGatlingResources')
project.gradle.startParameter.excludedTaskNames.add('checkstyleGatling')

application {
    // Define the main class for the application.
    mainClass = 'gov.va.vro.VroApplication'
}

tasks.dockerPrepare.configure {
    dependsOn(tasks.bootJar)
}

docker {
    noCache false
}

bootJar {
    manifest {
        attributes(
                'Application-Version': "${project.version}",
                'Start-Class': 'gov.va.vro.VroApplication',
                'Application-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())
        )
    }
}

openApi {
    customBootRun {
        getClasspath().setFrom(sourceSets.test.runtimeClasspath)
    }
}

afterEvaluate {
    tasks.getByName('spotlessCheck').dependsOn(tasks.getByName('spotlessApply'))

    tasks.named('forkedSpringBootRun').configure {
        dependsOn 'bootStartScripts'
        dependsOn 'checkstyleIntegrationTest'
        dependsOn 'checkstyleMain'
        dependsOn 'checkstyleTest'
        dependsOn 'compileIntegrationTestJava'
        dependsOn 'dockerfileZip'
        dependsOn 'integrationTest'
        dependsOn 'jar'
        dependsOn 'spotlessJava'
        dependsOn 'startScripts'
        dependsOn 'test'
        dependsOn ':service-python:pytest'

        dependsOn 'jacocoTestReport'
        dependsOn 'jacocoTestCoverageVerification'

        dependsOn 'dockerPrepare'
    }

    tasks.named('spectralLint').configure {
        dependsOn 'forkedSpringBootStop'
    }
}

tasks.named('lintDockerfile').configure {
    ext.targets = ["src/docker/Dockerfile"]
}

//Needed? this rebuilds the db-init docker image every time dockerComposeUp is run
//tasks.named('dockerComposeUp').configure {
//    dependsOn ':db-init:docker'
//}
