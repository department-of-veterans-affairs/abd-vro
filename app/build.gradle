plugins {
    id 'starter.std.java.application-conventions'
    id 'starter.java.config-conventions'
    id 'starter.java.build-utils-conventions'
}

dependencies {
    annotationBom platform("gov.va.starter:starter-bom:${starter_boot_version}")
    checkstyleRules platform("gov.va.starter:checkstyle-bom:${starter_boot_version}")

    implementation project(':api')
    implementation project(':controller')
    implementation project(':persistence:model')
    implementation project(':persistence:impl')
    implementation project(':service:provider')
    implementation project(':service:spi')
    implementation project(':test-data-factory')

    implementation 'gov.va.starter:health'
    implementation 'gov.va.starter:tracing'
    implementation 'gov.va.starter:error-handling'
    implementation 'gov.va.starter:exceptions'
    implementation 'gov.va.starter:open-api'
    implementation 'gov.va.starter:kafka-entity-lifecycle-notifier'
    // implementation 'gov.va.starter:open-policy-agent-config'
    implementation 'gov.va.starter:test-data'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // implementation 'com.bisnode.opa:opa-filter-spring-boot-starter'

    implementation 'com.h2database:h2'
    runtimeOnly 'com.h2database:h2'
    implementation 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:postgresql'

    docker project(':container-init')
    docker project(':db-init')
    docker project(':opa-init')
}


application {
    // Define the main class for the application.
    mainClass = 'gov.va.starter.example.ExampleApplication'
}

bootJar {
    manifest {
        attributes(
                'Application-Version': "${project.version}",
                'Start-Class': 'gov.va.starter.example.ExampleApplication',
//                "Application-Git-Commit": "${gitRevision}",
//                "Application-Git-Branch-Name": "${gitBranchName}",
                'Application-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())
        )
    }
}

tasks.named('lintDockerfile').configure {
    ext.targets = ["src/docker/Dockerfile"]
}

tasks.named('dockerComposeUp').configure {
    dependsOn ':container-init:docker'
    dependsOn ':db-init:docker'
    dependsOn ':opa-init:docker'
}
