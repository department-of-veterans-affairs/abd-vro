import java.text.SimpleDateFormat

plugins {
    id("io.gatling.gradle") version "${gatling_plugin_version}" apply false
    id 'starter.std.java.application-conventions'
    id 'starter.java.config-conventions'
    id 'starter.java.build-utils-conventions'
}

dependencies {
    annotationBom platform("gov.va.starter:starter-bom:${starter_boot_version}")
    checkstyleRules platform("gov.va.starter:checkstyle-bom:${starter_boot_version}")

    // override starter-bom
    implementation "org.springframework.boot:spring-boot-dependencies:${spring_boot_version}"
    implementation "org.springframework:spring-webmvc:${spring_framework_version}"
    implementation "org.springframework:spring-beans:${spring_framework_version}"
    implementation "io.github.classgraph:classgraph:${class_graph_version}"
    implementation 'org.scala-lang:scala-library:2.13.9'

    implementation project(':api')
    implementation project(':controller')
    implementation project(':persistence:model')
    implementation project(':service:provider')
    implementation project(':service:spi')
    implementation project(':service:db')

    implementation 'gov.va.starter:health'
    implementation 'gov.va.starter:tracing'
    implementation 'gov.va.starter:error-handling'
    implementation 'gov.va.starter:exceptions'
    implementation 'gov.va.starter:open-api'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    testRuntimeOnly "com.h2database:h2:${h2_version}"
    implementation "org.postgresql:postgresql:${postgresql_version}"
    runtimeOnly "org.postgresql:postgresql:${postgresql_version}"
    testImplementation 'org.testcontainers:junit-jupiter:1.17.3'
    testImplementation 'org.testcontainers:postgresql:1.17.4'
    //This version is compatible with current spring version: 5.3.8
    testImplementation 'org.apache.camel:camel-test-spring-junit5:3.18.2'

    docker project(':db-init')
}

// Disable tasks associated with Gatling
project.gradle.startParameter.excludedTaskNames.add('compileGatlingJava')
project.gradle.startParameter.excludedTaskNames.add('compileGatlingScala')
project.gradle.startParameter.excludedTaskNames.add('processGatlingResources')
project.gradle.startParameter.excludedTaskNames.add('checkstyleGatling')

configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute module("org.yaml:snakeyaml:1.30") using module("org.yaml:snakeyaml:1.33")
    }
}

application {
    // Define the main class for the application.
    mainClass = 'gov.va.vro.VroApplication'
}

tasks.dockerPrepare.configure {
    dependsOn(tasks.bootJar)
}

bootJar {
    manifest {
        attributes(
                'Application-Version': "${project.version}",
                'Start-Class': 'gov.va.vro.VroApplication',
                'Application-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())
        )
    }
}

openApi {
    customBootRun {
        getClasspath().setFrom(sourceSets.test.runtimeClasspath)
    }
}

afterEvaluate {
    tasks.getByName('spotlessCheck').dependsOn(tasks.getByName('spotlessApply'))

    tasks.named('forkedSpringBootRun').configure {
        dependsOn 'bootStartScripts'
        dependsOn 'checkstyleIntegrationTest'
        dependsOn 'checkstyleMain'
        dependsOn 'checkstyleTest'
        dependsOn 'compileIntegrationTestJava'
        dependsOn 'dockerfileZip'
        dependsOn 'integrationTest'
        dependsOn 'jar'
        dependsOn 'spotlessJava'
        dependsOn 'startScripts'
        dependsOn 'test'

        dependsOn 'jacocoTestReport'
        dependsOn 'jacocoTestCoverageVerification'

        dependsOn 'dockerPrepare'
    }

    tasks.named('spectralLint').configure {
        dependsOn 'forkedSpringBootStop'
    }
}

tasks.named('lintDockerfile').configure {
    ext.targets = ["src/docker/Dockerfile"]
}

tasks.named('dockerComposeUp').configure {
    dependsOn ':db-init:docker'
}


