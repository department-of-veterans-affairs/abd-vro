plugins {
  id 'local.std.java.application-conventions'
}

ext {
  // TODO: improve test code coverage so that the following can be removed
  jacoco_minimum_coverage = 0.6
}

dependencies {
  implementation project(':persistence:model')

  implementation project(':domain-rrd:rrd-shared')

  implementation project(':domain-xample:xample-api-controller')
  implementation project(':domain-cc:cc-api-controller')

  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-amqp'
  implementation "com.vladmihalcea:hibernate-types-55:${hibernate_types_version}"
  implementation "org.springframework.security:spring-security-core:${spring_security_version}"
  implementation "org.springframework.security:spring-security-config:${spring_security_version}"
  implementation "org.springframework.security:spring-security-web:${spring_security_version}"

  // https://mvnrepository.com/artifact/com.auth0/java-jwt
  implementation "com.auth0:java-jwt:4.2.1"
  // https://mvnrepository.com/artifact/com.auth0/jwks-rsa
  implementation "com.auth0:jwks-rsa:0.21.2"
  // https://mvnrepository.com/artifact/com.google.code.gson/gson
  implementation "com.google.code.gson:gson:2.10"

  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
  implementation 'io.jsonwebtoken:jjwt:0.2'

  // Needed?
  // implementation "org.postgresql:postgresql:${postgresql_version}"
  runtimeOnly "org.postgresql:postgresql:${postgresql_version}"

  testRuntimeOnly "com.h2database:h2:${h2_version}"

  testImplementation "org.apache.camel:camel-test-spring-junit5:${camel_version}"
  testImplementation "io.jsonwebtoken:jjwt:0.2"
}

openApi {
  // Generates build/springdoc/openapi.json
  customBootRun {
    getClasspath().setFrom(sourceSets.test.runtimeClasspath)
    args = [
      "--spring.profiles.active=test"
    ]
  }
}

afterEvaluate {
  // Disable https://github.com/springdoc/springdoc-openapi-gradle-plugin
  // Not particularly useful
  generateOpenApiDocs.enabled = false
  forkedSpringBootRun.enabled = false

  tasks.named('forkedSpringBootRun').configure {
    dependsOn 'bootStartScripts'
    dependsOn 'checkstyleIntegrationTest'
    dependsOn 'checkstyleMain'
    dependsOn 'checkstyleTest'
    dependsOn 'compileIntegrationTestJava'
    dependsOn 'dockerfileZip'
    dependsOn 'integrationTest'
    dependsOn 'jar'
    dependsOn 'spotlessJava'
    dependsOn 'startScripts'
    dependsOn 'test'
    // dependsOn ':service-python:pytest' // slows down `:app:build` task

    dependsOn 'jacocoTestReport'
    dependsOn 'jacocoTestCoverageVerification'

    dependsOn 'dockerPrepare'
  }

  tasks.named('spectralLint').configure {
    dependsOn 'forkedSpringBootStop'
  }

  tasks.named('dockerComposeDown') {
    dependsOn ':mocks:dockerComposeDown'
    dependsOn ':domain-xample:dockerComposeDown'
  }
}
