import logging

from hoppy_service import HoppyClientName, HoppyService
from merge_job import JobState, MergeJob
from response_exception import ResponseException
from statemachine import State, StateMachine


class EpMergeMachine(StateMachine):
    job: MergeJob | None = None

    # States:
    pending = State(initial=True)
    set_temp_station_of_jurisdiction = State()
    get_pending_claim_contentions = State()
    get_supp_claim_contentions = State()
    merge_contentions = State()
    update_pending_claim = State()
    cancel_supp_claim = State()
    completed = State(final=True)
    error = State(final=True)

    process = (
            pending.to(set_temp_station_of_jurisdiction)
            | set_temp_station_of_jurisdiction.to(get_pending_claim_contentions, unless="has_error")
            | set_temp_station_of_jurisdiction.to(error, cond="has_error")
            | get_pending_claim_contentions.to(get_supp_claim_contentions, unless="has_error")
            | get_pending_claim_contentions.to(error, cond="has_error")
            | get_supp_claim_contentions.to(merge_contentions, unless="has_error")
            | get_supp_claim_contentions.to(error, cond="has_error")
            | merge_contentions.to(update_pending_claim, unless="has_error")
            | merge_contentions.to(error, cond="has_error")
            | update_pending_claim.to(cancel_supp_claim, unless="has_error")
            | update_pending_claim.to(error, cond="has_error")
            | cancel_supp_claim.to(completed, unless="has_error")
            | cancel_supp_claim.to(error, cond="has_error")
    )

    def __init__(self, hoppy_service: HoppyService, merge_job: MergeJob):
        super().__init__()
        self.hoppy_service = hoppy_service
        self.job = merge_job

    def on_transition(self, source, target):
        logging.info(f"event=jobTransition job_id={self.job.job_id} old={source.id} new={target.id}")

    @set_temp_station_of_jurisdiction.enter
    def set_temp_soj(self):
        self.job.state = JobState.RUNNING_SET_TEMP_STATION_OF_JURISDICTION

        # TODO use the response generated by the request.
        self.make_hoppy_request(
            body={"claim_id": self.job.pending_claim_id, "SOJ": 398},
            hoppy_client=self.hoppy_service.get_client(HoppyClientName.PUT_TSOJ))
        self.process()

    @get_pending_claim_contentions.enter
    def get_pending_contentions(self):
        self.job.state = JobState.RUNNING_GET_PENDING_CLAIM_CONTENTIONS

        # TODO use the response generated by the request.
        self.make_hoppy_request(
            body={"claim_id": self.job.pending_claim_id},
            hoppy_client=self.hoppy_service.get_client(HoppyClientName.GET_CLAIM_CONTENTIONS))
        self.process()

    @get_supp_claim_contentions.enter
    def get_supp_contentions(self):
        self.job.state = JobState.RUNNING_GET_SUPP_CLAIM_CONTENTIONS

        # TODO use the response generated by the request.
        self.make_hoppy_request(
            body={"claim_id": self.job.supp_claim_id},
            hoppy_client=self.hoppy_service.get_client(HoppyClientName.GET_CLAIM_CONTENTIONS))
        self.process()

    @merge_contentions.enter
    def process_merge(self):
        self.job.state = JobState.RUNNING_MERGE_CONTENTIONS

        # TODO: add in logic to merge contentions into pending claim
        merge_contentions(None, None)

        self.process()

    @update_pending_claim.enter
    def update_claims(self):
        self.job.state = JobState.RUNNING_UPDATE_PENDING_CLAIM_CONTENTIONS

        # TODO use the response generated by the request.
        self.make_hoppy_request(
            body={"claim_id": self.job.supp_claim_id},
            hoppy_client=self.hoppy_service.get_client(HoppyClientName.UPDATE_CLAIM_CONTENTIONS))
        self.process()

    @cancel_supp_claim.enter
    def cancel_claims(self):
        self.job.state = JobState.RUNNING_CANCEL_SUPP_CLAIM

        # TODO use the response generated by the request.
        self.make_hoppy_request(
            body={"claim_id": self.job.supp_claim_id},
            hoppy_client=self.hoppy_service.get_client(HoppyClientName.CANCEL_CLAIM))
        self.process()

    @completed.enter
    def completed(self):
        self.job.state = JobState.COMPLETED_SUCCESS

    def make_hoppy_request(self, body, hoppy_client):
        try:
            return hoppy_client.make_request(self.job.job_id, body)
        except ResponseException as e:
            logging.error(f"event=errorProcessingJob "
                          f"job_id={self.job.job_id} "
                          f"error=\'{e.message}\'")
            self.job.error(self.job.state, e.message)

    def has_error(self):
        return self.job.state == JobState.COMPLETED_ERROR


def merge_contentions(pending_contentions, supp_contentions):
    return {"updated": "contentions"}
