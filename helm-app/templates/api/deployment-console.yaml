apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}-console
  labels:
      app: vro-console
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vro-console
  template:
    metadata:
      labels:
        sidecar.istio.io/inject: "false"
        app: vro-console
        volume: database
    spec:
      imagePullSecrets:
        - name: {{ .Values.name }}-ghcr
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                volume: database
            # https://stackoverflow.com/questions/72240224/what-is-topologykey-in-pod-affinity
            topologyKey: topology.kubernetes.io/zone
      volumes:
        - name: {{ .Values.volumes.tracking.name }}
          persistentVolumeClaim:
            claimName: {{ .Values.volumes.tracking.claimName }}
        - name: persistent-storage
          persistentVolumeClaim:
            claimName: ebs-db-claim #This name should match that of the persistent volume claim created above
      containers:
        - name: {{ .Values.name }}-console
          image: {{ .Values.images.registry }}/{{ .Values.images.org }}/{{ .Values.images.repo }}/{{ .Values.images.console.imageName }}:{{ .Values.images.console.tag }}
          imagePullPolicy: {{ .Values.images.console.imagePullPolicy }}
          stdin: true
          tty: true
          # Just spin & wait forever
          command: [ "/bin/sh", "-c", "--" ]
          args: [ "while true; do sleep 30; done;" ]
          env:
            - name: ENV
              value: {{ .Values.environment }}
            - name: POSTGRES_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretName }}
                  key: {{ .Values.postgres.urlKey }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretName }}
                  key: {{ .Values.postgres.usernameKey }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretName }}
                  key: {{ .Values.postgres.passwordKey }}
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretName }}
                  key: {{ .Values.postgres.dbnameKey }}
            - name: POSTGRES_SCHEMA
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretName }}
                  key: {{ .Values.postgres.schemaKey }}
            - name: RABBITMQ_PLACEHOLDERS_HOST
              value: {{ .Chart.Name }}-rabbit-mq-service
            - name: RABBITMQ_PLACEHOLDERS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.secretName }}
                  key: {{ .Values.rabbitmq.usernameKey }}
            - name: RABBITMQ_PLACEHOLDERS_USERPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.secretName }}
                  key: {{ .Values.rabbitmq.passwordKey }}
            - name: REDIS_PLACEHOLDERS_HOST
              value: {{ .Chart.Name }}-redis-service
            - name: REDIS_PLACEHOLDERS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.secretName }}
                  key: {{ .Values.redis.passwordKey }}
          resources:
            requests:
              cpu: 150m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1024Mi
          volumeMounts:
            - name: persistent-storage
              mountPath: /persist/postgres
            - name: {{ .Values.volumes.tracking.name }}
              mountPath: {{ .Values.volumes.tracking.mountPath }}
