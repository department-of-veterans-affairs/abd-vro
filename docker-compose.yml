networks:
  # Creates `vro_intranet` network if env variable COMPOSE_PROJECT_NAME=vro
  intranet:

volumes:
  # Volumes to simulate persistent volumes in LHDI deployment environments
  # Creates `vro_tracking` volume name if env variable COMPOSE_PROJECT_NAME=vro
  pgdata:
  tracking:
  # Create the following volumes so that they have recognizable names rather than UUIDs
  var_pgdata:
  var_rabbitmq:

# Reusable blocks
# https://medium.com/@kinghuang/docker-compose-anchors-aliases-extensions-a1e4105d70bd
# Also note https://yaml.org/type/merge.html

x-common-vars: &common-vars
  # ENV determines which configuration settings to use.
  ENV: ${ENV:-local}

x-rabbitmq-placeholder-vars: &rabbitmq-placeholder-vars
  RABBITMQ_PLACEHOLDERS_HOST: rabbitmq-service
  RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
  RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}

x-datadog-placeholder-vars: &datadog-placeholder-vars
  DD_SITE: ${DD_SITE}
  DD_API_KEY: ${DD_API_KEY}
  DD_APP_KEY: ${DD_APP_KEY}

x-common-security-opt: &common-security-opt
  security_opt:
    - no-new-privileges:true

x-common-sde-security: &common-sde-security
  ulimits:
    nproc: 65535

x-image-platform: &image-platform
  platform: ${VRO_DOCKER_IMAGE_PLATFORM}

# Don't start VRO microservices until VRO Platform services are up
x-svc-depends-on: &svc-depends-on
  rabbitmq-service:
    condition: service_healthy
  postgres-service:
    condition: service_healthy

services:
  # Containers with the `svc-` prefix are microservices to support domain workflows.
  # Containers with the `mock-` prefix are used for development and testing.

  rabbitmq-service:
    image: abd_vro-rabbitmq
    <<: *image-platform
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 3s
      retries: 30
    volumes:
      - var_rabbitmq:/var/lib/rabbitmq/mnesia
    networks:
      - intranet
    profiles: [ "all", "platform", "kafka"]
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_DISK_FREE_ABSOLUTE_LIMIT: "10GB"
      RABBITMQ_MANAGEMENT_ALLOW_WEB_ACCESS: "true"

  postgres-service:
    image: va/abd_vro-postgres
    healthcheck:
      test: "pg_isready -U $$FLYWAY_USER -d $$FLYWAY_DB"
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_SUPER_USER}
      POSTGRES_PASSWORD: ${POSTGRES_SUPER_PASSWORD}
      FLYWAY_USER: ${POSTGRES_FLYWAY_USER}
      FLYWAY_PASSWORD: ${POSTGRES_FLYWAY_PASSWORD}
      FLYWAY_DB: ${POSTGRES_DB}
      PGDATA: /persist/postgres/pgdata
    volumes:
      - pgdata:/persist/postgres
      - var_pgdata:/var/lib/postgresql/data
    networks:
      - intranet
    profiles: [ "all", "platform" ]
    ports:
      - "5432:5432"

  db-init:
    image: va/abd_vro-db-init:latest
    depends_on:
      postgres-service:
        condition: service_healthy
    networks:
      - intranet
    profiles: [ "all", "platform"]
    environment:
      POSTGRES_URL: postgresql://postgres-service:5432/${POSTGRES_DB}
      FLYWAY_USER: ${POSTGRES_FLYWAY_USER}
      FLYWAY_PASSWORD: ${POSTGRES_FLYWAY_PASSWORD}
      FLYWAY_SCHEMA: ${POSTGRES_SCHEMA}
      FLYWAY_PLACEHOLDERS_USERNAME: ${POSTGRES_USER}
      FLYWAY_PLACEHOLDERS_DB_NAME: ${POSTGRES_DB}
      FLYWAY_PLACEHOLDERS_SCHEMA_NAME: ${POSTGRES_SCHEMA}
      FLYWAY_PLACEHOLDERS_USER_PASSWORD: ${POSTGRES_PASSWORD}
      FLYWAY_PLACEHOLDERS_ALEMBIC_USERNAME: ${POSTGRES_DOMAIN_CC_USER}
      FLYWAY_PLACEHOLDERS_ALEMBIC_SCHEMA: domain_cc
      FLYWAY_PLACEHOLDERS_ALEMBIC_PASSWORD: ${POSTGRES_DOMAIN_CC_PW}

  svc-bip-api:
    profiles: ["all", "svc", "bip"]
    image: va/abd_vro-svc-bip-api:latest
    environment:
      <<: [ *rabbitmq-placeholder-vars, *datadog-placeholder-vars ]
      BIP_CLAIM_USERID: ${BIP_CLAIM_USERID}
      BIP_CLAIM_SECRET: ${BIP_CLAIM_SECRET}
      BIP_EVIDENCE_USERID: ${BIP_EVIDENCE_USERID}
      BIP_EVIDENCE_SECRET: ${BIP_EVIDENCE_SECRET}
      BIP_TRUSTSTORE: ${BIP_TRUSTSTORE}
      BIP_PASSWORD: ${BIP_PASSWORD}
      BIP_KEYSTORE: ${BIP_KEYSTORE}
      BIP_CLAIM_URL: ${BIP_CLAIM_URL}
      BIP_EVIDENCE_URL: ${BIP_EVIDENCE_URL}
    ports:
      - "10401:10401"
    networks:
      - intranet
    depends_on:
      <<: [ *svc-depends-on ]

  svc-bgs-api:
    profiles: ["all","svc","bgs"]
    image: va/abd_vro-svc-bgs-api:latest
    <<: [*common-sde-security, *common-security-opt]
    environment:
      <<: [*rabbitmq-placeholder-vars, *common-vars]
      DOCKER_LOGS: "1"
    networks:
      - intranet
    depends_on:
      <<: [ *svc-depends-on ]

  svc-bie-kafka:
    # Expose healthcheck port for end2end test
    ports:
      - "10301:10301"
    profiles: [ "all","svc","kafka" ]
    image: va/abd_vro-svc-bie-kafka:latest
    <<: [ *common-sde-security, *common-security-opt ]
    environment:
      <<: [*rabbitmq-placeholder-vars, *common-vars]
      BIE_KAFKA_PLACEHOLDERS_BROKERS: mock-bie-kafka:9092
      BIE_KAFKA_PLACEHOLDERS_SCHEMA_REGISTRY: mock-bie-schema-registry:8081
      BIE_KAFKA_KEYSTORE_INBASE64: ${BIE_KAFKA_KEYSTORE_INBASE64}
      BIE_KAFKA_KEYSTORE_PASSWORD: ${BIE_KAFKA_KEYSTORE_PASSWORD}
      BIE_KAFKA_TRUSTSTORE_INBASE64: ${BIE_KAFKA_TRUSTSTORE_INBASE64}
      BIE_KAFKA_TRUSTSTORE_PASSWORD: ${BIE_KAFKA_TRUSTSTORE_PASSWORD}
    networks:
      - intranet
    depends_on:
      <<: [ *svc-depends-on ]
